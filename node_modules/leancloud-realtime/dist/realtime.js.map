{"version":3,"file":"realtime.js","sources":["../proto/message-compiled.js","../proto/message.js","../src/utils/global.js","../src/utils/expirable.js","../src/utils/cache.js","../src/utils/index.js","../src/websocket-plus.js","../src/error.js","../src/connection.js","../src/plugin.js","../src/realtime.js","../src/events/im.js","../src/messages/message.js","../src/messages/helpers.js","../src/messages/typed-message.js","../src/messages/recalled-message.js","../src/conversations/conversation-base.js","../src/signature-factory-runner.js","../src/conversations/persistent-conversation.js","../src/conversation-member-info.js","../src/conversations/conversation.js","../src/conversations/chat-room.js","../src/conversations/service-conversation.js","../src/conversations/temporary-conversation.js","../src/conversation-query.js","../src/session-manager.js","../src/im-client.js","../src/events/core.js","../src/messages/binary-message.js","../src/messages/text-message.js","../src/message-parser.js","../src/plugin-im.js","../src/index.js"],"sourcesContent":["module.exports = require('protobufjs/dist/protobuf-light')\n  .newBuilder({})\n  ['import']({\n    package: 'push_server.messages2',\n    syntax: 'proto2',\n    options: {\n      objc_class_prefix: 'AVIM',\n    },\n    messages: [\n      {\n        name: 'JsonObjectMessage',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'required',\n            type: 'string',\n            name: 'data',\n            id: 1,\n          },\n        ],\n      },\n      {\n        name: 'UnreadTuple',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'required',\n            type: 'string',\n            name: 'cid',\n            id: 1,\n          },\n          {\n            rule: 'required',\n            type: 'int32',\n            name: 'unread',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'mid',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'timestamp',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'from',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'data',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'patchTimestamp',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'mentioned',\n            id: 8,\n          },\n          {\n            rule: 'optional',\n            type: 'bytes',\n            name: 'binaryMsg',\n            id: 9,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'convType',\n            id: 10,\n          },\n        ],\n      },\n      {\n        name: 'LogItem',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'from',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'data',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'timestamp',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'msgId',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'ackAt',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'readAt',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'patchTimestamp',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'mentionAll',\n            id: 8,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'mentionPids',\n            id: 9,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'bin',\n            id: 10,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'convType',\n            id: 11,\n          },\n        ],\n      },\n      {\n        name: 'ConvMemberInfo',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'pid',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'role',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'infoId',\n            id: 3,\n          },\n        ],\n      },\n      {\n        name: 'DataCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'ids',\n            id: 1,\n          },\n          {\n            rule: 'repeated',\n            type: 'JsonObjectMessage',\n            name: 'msg',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'offline',\n            id: 3,\n          },\n        ],\n      },\n      {\n        name: 'SessionCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 't',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'n',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 's',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'ua',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'r',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'tag',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'deviceId',\n            id: 7,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'sessionPeerIds',\n            id: 8,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'onlineSessionPeerIds',\n            id: 9,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'st',\n            id: 10,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'stTtl',\n            id: 11,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'code',\n            id: 12,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'reason',\n            id: 13,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'deviceToken',\n            id: 14,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'sp',\n            id: 15,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'detail',\n            id: 16,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'lastUnreadNotifTime',\n            id: 17,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'lastPatchTime',\n            id: 18,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'configBitmap',\n            id: 19,\n          },\n        ],\n      },\n      {\n        name: 'ErrorCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'required',\n            type: 'int32',\n            name: 'code',\n            id: 1,\n          },\n          {\n            rule: 'required',\n            type: 'string',\n            name: 'reason',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'appCode',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'detail',\n            id: 4,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'pids',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'appMsg',\n            id: 6,\n          },\n        ],\n      },\n      {\n        name: 'DirectCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'msg',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'uid',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'fromPeerId',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'timestamp',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'offline',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'hasMore',\n            id: 6,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'toPeerIds',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'r',\n            id: 10,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 11,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'id',\n            id: 12,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'transient',\n            id: 13,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'dt',\n            id: 14,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'roomId',\n            id: 15,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'pushData',\n            id: 16,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'will',\n            id: 17,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'patchTimestamp',\n            id: 18,\n          },\n          {\n            rule: 'optional',\n            type: 'bytes',\n            name: 'binaryMsg',\n            id: 19,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'mentionPids',\n            id: 20,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'mentionAll',\n            id: 21,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'convType',\n            id: 22,\n          },\n        ],\n      },\n      {\n        name: 'AckCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'code',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'reason',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'mid',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 't',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'uid',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'fromts',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'tots',\n            id: 8,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'type',\n            id: 9,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'ids',\n            id: 10,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'appCode',\n            id: 11,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'appMsg',\n            id: 12,\n          },\n        ],\n      },\n      {\n        name: 'UnreadCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'repeated',\n            type: 'UnreadTuple',\n            name: 'convs',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'notifTime',\n            id: 2,\n          },\n        ],\n      },\n      {\n        name: 'ConvCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'm',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'transient',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'unique',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cdate',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'initBy',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'sort',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'limit',\n            id: 8,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'skip',\n            id: 9,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'flag',\n            id: 10,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'count',\n            id: 11,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'udate',\n            id: 12,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 't',\n            id: 13,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'n',\n            id: 14,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 's',\n            id: 15,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'statusSub',\n            id: 16,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'statusPub',\n            id: 17,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'statusTTL',\n            id: 18,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'uniqueId',\n            id: 19,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'targetClientId',\n            id: 20,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'maxReadTimestamp',\n            id: 21,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'maxAckTimestamp',\n            id: 22,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'queryAllMembers',\n            id: 23,\n          },\n          {\n            rule: 'repeated',\n            type: 'MaxReadTuple',\n            name: 'maxReadTuples',\n            id: 24,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'cids',\n            id: 25,\n          },\n          {\n            rule: 'optional',\n            type: 'ConvMemberInfo',\n            name: 'info',\n            id: 26,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'tempConv',\n            id: 27,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'tempConvTTL',\n            id: 28,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'tempConvIds',\n            id: 29,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'allowedPids',\n            id: 30,\n          },\n          {\n            rule: 'repeated',\n            type: 'ErrorCommand',\n            name: 'failedPids',\n            id: 31,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'next',\n            id: 40,\n          },\n          {\n            rule: 'optional',\n            type: 'JsonObjectMessage',\n            name: 'results',\n            id: 100,\n          },\n          {\n            rule: 'optional',\n            type: 'JsonObjectMessage',\n            name: 'where',\n            id: 101,\n          },\n          {\n            rule: 'optional',\n            type: 'JsonObjectMessage',\n            name: 'attr',\n            id: 103,\n          },\n          {\n            rule: 'optional',\n            type: 'JsonObjectMessage',\n            name: 'attrModified',\n            id: 104,\n          },\n        ],\n      },\n      {\n        name: 'RoomCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'roomId',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 's',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 't',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'n',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'transient',\n            id: 5,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'roomPeerIds',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'byPeerId',\n            id: 7,\n          },\n        ],\n      },\n      {\n        name: 'LogsCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'l',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'limit',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 't',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'tt',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'tmid',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'mid',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'checksum',\n            id: 8,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'stored',\n            id: 9,\n          },\n          {\n            rule: 'optional',\n            type: 'QueryDirection',\n            name: 'direction',\n            id: 10,\n            options: {\n              default: 'OLD',\n            },\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'tIncluded',\n            id: 11,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'ttIncluded',\n            id: 12,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'lctype',\n            id: 13,\n          },\n          {\n            rule: 'repeated',\n            type: 'LogItem',\n            name: 'logs',\n            id: 105,\n          },\n        ],\n        enums: [\n          {\n            name: 'QueryDirection',\n            syntax: 'proto2',\n            values: [\n              {\n                name: 'OLD',\n                id: 1,\n              },\n              {\n                name: 'NEW',\n                id: 2,\n              },\n            ],\n          },\n        ],\n      },\n      {\n        name: 'RcpCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'id',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 't',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'read',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'from',\n            id: 5,\n          },\n        ],\n      },\n      {\n        name: 'ReadTuple',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'required',\n            type: 'string',\n            name: 'cid',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'timestamp',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'mid',\n            id: 3,\n          },\n        ],\n      },\n      {\n        name: 'MaxReadTuple',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'pid',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'maxAckTimestamp',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'maxReadTimestamp',\n            id: 3,\n          },\n        ],\n      },\n      {\n        name: 'ReadCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 1,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'cids',\n            id: 2,\n          },\n          {\n            rule: 'repeated',\n            type: 'ReadTuple',\n            name: 'convs',\n            id: 3,\n          },\n        ],\n      },\n      {\n        name: 'PresenceCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'StatusType',\n            name: 'status',\n            id: 1,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'sessionPeerIds',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 3,\n          },\n        ],\n      },\n      {\n        name: 'ReportCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'initiative',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'type',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'data',\n            id: 3,\n          },\n        ],\n      },\n      {\n        name: 'PatchItem',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'mid',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'timestamp',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'recall',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'data',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'patchTimestamp',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'from',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'bytes',\n            name: 'binaryMsg',\n            id: 8,\n          },\n          {\n            rule: 'optional',\n            type: 'bool',\n            name: 'mentionAll',\n            id: 9,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'mentionPids',\n            id: 10,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'patchCode',\n            id: 11,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'patchReason',\n            id: 12,\n          },\n        ],\n      },\n      {\n        name: 'PatchCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'repeated',\n            type: 'PatchItem',\n            name: 'patches',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'lastPatchTime',\n            id: 2,\n          },\n        ],\n      },\n      {\n        name: 'PubsubCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'cid',\n            id: 1,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'cids',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'topic',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'subtopic',\n            id: 4,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'topics',\n            id: 5,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'subtopics',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'JsonObjectMessage',\n            name: 'results',\n            id: 7,\n          },\n        ],\n      },\n      {\n        name: 'BlacklistCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'srcCid',\n            id: 1,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'toPids',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'srcPid',\n            id: 3,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'toCids',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'limit',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'next',\n            id: 6,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'blockedPids',\n            id: 8,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'blockedCids',\n            id: 9,\n          },\n          {\n            rule: 'repeated',\n            type: 'string',\n            name: 'allowedPids',\n            id: 10,\n          },\n          {\n            rule: 'repeated',\n            type: 'ErrorCommand',\n            name: 'failedPids',\n            id: 11,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 't',\n            id: 12,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'n',\n            id: 13,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 's',\n            id: 14,\n          },\n        ],\n      },\n      {\n        name: 'GenericCommand',\n        syntax: 'proto2',\n        fields: [\n          {\n            rule: 'optional',\n            type: 'CommandType',\n            name: 'cmd',\n            id: 1,\n          },\n          {\n            rule: 'optional',\n            type: 'OpType',\n            name: 'op',\n            id: 2,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'appId',\n            id: 3,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'peerId',\n            id: 4,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'i',\n            id: 5,\n          },\n          {\n            rule: 'optional',\n            type: 'string',\n            name: 'installationId',\n            id: 6,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'priority',\n            id: 7,\n          },\n          {\n            rule: 'optional',\n            type: 'int32',\n            name: 'service',\n            id: 8,\n          },\n          {\n            rule: 'optional',\n            type: 'int64',\n            name: 'serverTs',\n            id: 9,\n          },\n          {\n            rule: 'optional',\n            type: 'DataCommand',\n            name: 'dataMessage',\n            id: 101,\n          },\n          {\n            rule: 'optional',\n            type: 'SessionCommand',\n            name: 'sessionMessage',\n            id: 102,\n          },\n          {\n            rule: 'optional',\n            type: 'ErrorCommand',\n            name: 'errorMessage',\n            id: 103,\n          },\n          {\n            rule: 'optional',\n            type: 'DirectCommand',\n            name: 'directMessage',\n            id: 104,\n          },\n          {\n            rule: 'optional',\n            type: 'AckCommand',\n            name: 'ackMessage',\n            id: 105,\n          },\n          {\n            rule: 'optional',\n            type: 'UnreadCommand',\n            name: 'unreadMessage',\n            id: 106,\n          },\n          {\n            rule: 'optional',\n            type: 'ReadCommand',\n            name: 'readMessage',\n            id: 107,\n          },\n          {\n            rule: 'optional',\n            type: 'RcpCommand',\n            name: 'rcpMessage',\n            id: 108,\n          },\n          {\n            rule: 'optional',\n            type: 'LogsCommand',\n            name: 'logsMessage',\n            id: 109,\n          },\n          {\n            rule: 'optional',\n            type: 'ConvCommand',\n            name: 'convMessage',\n            id: 110,\n          },\n          {\n            rule: 'optional',\n            type: 'RoomCommand',\n            name: 'roomMessage',\n            id: 111,\n          },\n          {\n            rule: 'optional',\n            type: 'PresenceCommand',\n            name: 'presenceMessage',\n            id: 112,\n          },\n          {\n            rule: 'optional',\n            type: 'ReportCommand',\n            name: 'reportMessage',\n            id: 113,\n          },\n          {\n            rule: 'optional',\n            type: 'PatchCommand',\n            name: 'patchMessage',\n            id: 114,\n          },\n          {\n            rule: 'optional',\n            type: 'PubsubCommand',\n            name: 'pubsubMessage',\n            id: 115,\n          },\n          {\n            rule: 'optional',\n            type: 'BlacklistCommand',\n            name: 'blacklistMessage',\n            id: 116,\n          },\n        ],\n      },\n    ],\n    enums: [\n      {\n        name: 'CommandType',\n        syntax: 'proto2',\n        values: [\n          {\n            name: 'session',\n            id: 0,\n          },\n          {\n            name: 'conv',\n            id: 1,\n          },\n          {\n            name: 'direct',\n            id: 2,\n          },\n          {\n            name: 'ack',\n            id: 3,\n          },\n          {\n            name: 'rcp',\n            id: 4,\n          },\n          {\n            name: 'unread',\n            id: 5,\n          },\n          {\n            name: 'logs',\n            id: 6,\n          },\n          {\n            name: 'error',\n            id: 7,\n          },\n          {\n            name: 'login',\n            id: 8,\n          },\n          {\n            name: 'data',\n            id: 9,\n          },\n          {\n            name: 'room',\n            id: 10,\n          },\n          {\n            name: 'read',\n            id: 11,\n          },\n          {\n            name: 'presence',\n            id: 12,\n          },\n          {\n            name: 'report',\n            id: 13,\n          },\n          {\n            name: 'echo',\n            id: 14,\n          },\n          {\n            name: 'loggedin',\n            id: 15,\n          },\n          {\n            name: 'logout',\n            id: 16,\n          },\n          {\n            name: 'loggedout',\n            id: 17,\n          },\n          {\n            name: 'patch',\n            id: 18,\n          },\n          {\n            name: 'pubsub',\n            id: 19,\n          },\n          {\n            name: 'blacklist',\n            id: 20,\n          },\n          {\n            name: 'goaway',\n            id: 21,\n          },\n        ],\n      },\n      {\n        name: 'OpType',\n        syntax: 'proto2',\n        values: [\n          {\n            name: 'open',\n            id: 1,\n          },\n          {\n            name: 'add',\n            id: 2,\n          },\n          {\n            name: 'remove',\n            id: 3,\n          },\n          {\n            name: 'close',\n            id: 4,\n          },\n          {\n            name: 'opened',\n            id: 5,\n          },\n          {\n            name: 'closed',\n            id: 6,\n          },\n          {\n            name: 'query',\n            id: 7,\n          },\n          {\n            name: 'query_result',\n            id: 8,\n          },\n          {\n            name: 'conflict',\n            id: 9,\n          },\n          {\n            name: 'added',\n            id: 10,\n          },\n          {\n            name: 'removed',\n            id: 11,\n          },\n          {\n            name: 'refresh',\n            id: 12,\n          },\n          {\n            name: 'refreshed',\n            id: 13,\n          },\n          {\n            name: 'start',\n            id: 30,\n          },\n          {\n            name: 'started',\n            id: 31,\n          },\n          {\n            name: 'joined',\n            id: 32,\n          },\n          {\n            name: 'members_joined',\n            id: 33,\n          },\n          {\n            name: 'left',\n            id: 39,\n          },\n          {\n            name: 'members_left',\n            id: 40,\n          },\n          {\n            name: 'results',\n            id: 42,\n          },\n          {\n            name: 'count',\n            id: 43,\n          },\n          {\n            name: 'result',\n            id: 44,\n          },\n          {\n            name: 'update',\n            id: 45,\n          },\n          {\n            name: 'updated',\n            id: 46,\n          },\n          {\n            name: 'mute',\n            id: 47,\n          },\n          {\n            name: 'unmute',\n            id: 48,\n          },\n          {\n            name: 'status',\n            id: 49,\n          },\n          {\n            name: 'members',\n            id: 50,\n          },\n          {\n            name: 'max_read',\n            id: 51,\n          },\n          {\n            name: 'is_member',\n            id: 52,\n          },\n          {\n            name: 'member_info_update',\n            id: 53,\n          },\n          {\n            name: 'member_info_updated',\n            id: 54,\n          },\n          {\n            name: 'member_info_changed',\n            id: 55,\n          },\n          {\n            name: 'join',\n            id: 80,\n          },\n          {\n            name: 'invite',\n            id: 81,\n          },\n          {\n            name: 'leave',\n            id: 82,\n          },\n          {\n            name: 'kick',\n            id: 83,\n          },\n          {\n            name: 'reject',\n            id: 84,\n          },\n          {\n            name: 'invited',\n            id: 85,\n          },\n          {\n            name: 'kicked',\n            id: 86,\n          },\n          {\n            name: 'upload',\n            id: 100,\n          },\n          {\n            name: 'uploaded',\n            id: 101,\n          },\n          {\n            name: 'subscribe',\n            id: 120,\n          },\n          {\n            name: 'subscribed',\n            id: 121,\n          },\n          {\n            name: 'unsubscribe',\n            id: 122,\n          },\n          {\n            name: 'unsubscribed',\n            id: 123,\n          },\n          {\n            name: 'is_subscribed',\n            id: 124,\n          },\n          {\n            name: 'modify',\n            id: 150,\n          },\n          {\n            name: 'modified',\n            id: 151,\n          },\n          {\n            name: 'block',\n            id: 170,\n          },\n          {\n            name: 'unblock',\n            id: 171,\n          },\n          {\n            name: 'blocked',\n            id: 172,\n          },\n          {\n            name: 'unblocked',\n            id: 173,\n          },\n          {\n            name: 'members_blocked',\n            id: 174,\n          },\n          {\n            name: 'members_unblocked',\n            id: 175,\n          },\n          {\n            name: 'check_block',\n            id: 176,\n          },\n          {\n            name: 'check_result',\n            id: 177,\n          },\n          {\n            name: 'add_shutup',\n            id: 180,\n          },\n          {\n            name: 'remove_shutup',\n            id: 181,\n          },\n          {\n            name: 'query_shutup',\n            id: 182,\n          },\n          {\n            name: 'shutup_added',\n            id: 183,\n          },\n          {\n            name: 'shutup_removed',\n            id: 184,\n          },\n          {\n            name: 'shutup_result',\n            id: 185,\n          },\n          {\n            name: 'shutuped',\n            id: 186,\n          },\n          {\n            name: 'unshutuped',\n            id: 187,\n          },\n          {\n            name: 'members_shutuped',\n            id: 188,\n          },\n          {\n            name: 'members_unshutuped',\n            id: 189,\n          },\n          {\n            name: 'check_shutup',\n            id: 190,\n          },\n        ],\n      },\n      {\n        name: 'StatusType',\n        syntax: 'proto2',\n        values: [\n          {\n            name: 'on',\n            id: 1,\n          },\n          {\n            name: 'off',\n            id: 2,\n          },\n        ],\n      },\n    ],\n    isNamespace: true,\n  })\n  .build();\n","import messages from './message-compiled';\n\nconst {\n  JsonObjectMessage,\n  UnreadTuple,\n  LogItem,\n  DataCommand,\n  SessionCommand,\n  ErrorCommand,\n  DirectCommand,\n  AckCommand,\n  UnreadCommand,\n  ConvCommand,\n  RoomCommand,\n  LogsCommand,\n  RcpCommand,\n  ReadTuple,\n  MaxReadTuple,\n  ReadCommand,\n  PresenceCommand,\n  ReportCommand,\n  GenericCommand,\n  BlacklistCommand,\n  PatchCommand,\n  PatchItem,\n  ConvMemberInfo,\n  CommandType,\n  OpType,\n  StatusType,\n} = messages.push_server.messages2;\n\nexport {\n  JsonObjectMessage,\n  UnreadTuple,\n  LogItem,\n  DataCommand,\n  SessionCommand,\n  ErrorCommand,\n  DirectCommand,\n  AckCommand,\n  UnreadCommand,\n  ConvCommand,\n  RoomCommand,\n  LogsCommand,\n  RcpCommand,\n  ReadTuple,\n  MaxReadTuple,\n  ReadCommand,\n  PresenceCommand,\n  ReportCommand,\n  GenericCommand,\n  BlacklistCommand,\n  PatchCommand,\n  PatchItem,\n  ConvMemberInfo,\n  CommandType,\n  OpType,\n  StatusType,\n};\n","/* eslint-disable */\nexport default (typeof global !== 'undefined'\n  ? global\n  : typeof window !== 'undefined' ? window : {});\n","import d from 'debug';\n\nconst EXPIRED = Symbol('expired');\nconst debug = d('LC:Expirable');\nexport default class Expirable {\n  constructor(value, ttl) {\n    this.originalValue = value;\n    if (typeof ttl === 'number') {\n      this.expiredAt = Date.now() + ttl;\n    }\n  }\n\n  get value() {\n    const expired = this.expiredAt && this.expiredAt <= Date.now();\n    if (expired) debug(`expired: ${this.originalValue}`);\n    return expired ? EXPIRED : this.originalValue;\n  }\n}\nExpirable.EXPIRED = EXPIRED;\n","import d from 'debug';\nimport Expirable from './expirable';\n\nconst debug = d('LC:Cache');\nexport default class Cache {\n  constructor(name = 'anonymous') {\n    this.name = name;\n    this._map = {};\n  }\n\n  get(key) {\n    const cache = this._map[key];\n    if (cache) {\n      const { value } = cache;\n      if (value !== Expirable.EXPIRED) {\n        debug('[%s] hit: %s', this.name, key);\n        return value;\n      }\n      delete this._map[key];\n    }\n    debug(`[${this.name}] missed: ${key}`);\n    return null;\n  }\n\n  set(key, value, ttl) {\n    debug('[%s] set: %s %o %d', this.name, key, value, ttl);\n    this._map[key] = new Expirable(value, ttl);\n  }\n}\n","import isPlainObject from 'lodash/isPlainObject';\nimport global from './global';\n\nexport { global };\n\nexport const tryAll = promiseConstructors => {\n  const promise = new Promise(promiseConstructors[0]);\n  if (promiseConstructors.length === 1) {\n    return promise;\n  }\n  return promise.catch(() => tryAll(promiseConstructors.slice(1)));\n};\n\n// eslint-disable-next-line no-sequences\nexport const tap = interceptor => value => (interceptor(value), value);\n\nexport const finalize = callback => [\n  // eslint-disable-next-line no-sequences\n  value => (callback(), value),\n  error => {\n    callback();\n    throw error;\n  },\n];\n\nexport { default as Expirable } from './expirable';\nexport { default as Cache } from './cache';\n\n/**\n * 将对象转换为 Date，支持 string、number、ProtoBuf Long 以及 LeanCloud 的 Date 类型，\n * 其他情况下（包括对象为 falsy）返回原值。\n * @private\n */\nexport const decodeDate = date => {\n  if (!date) return date;\n  if (typeof date === 'string' || typeof date === 'number') {\n    return new Date(date);\n  }\n  if (date.__type === 'Date' && date.iso) {\n    return new Date(date.iso);\n  }\n  // Long\n  if (typeof date.toNumber === 'function') {\n    return new Date(date.toNumber());\n  }\n  return date;\n};\n/**\n * 获取 Date 的毫秒数，如果不是一个 Date 返回 undefined。\n * @private\n */\nexport const getTime = date =>\n  date && date.getTime ? date.getTime() : undefined;\n\n/**\n * 解码对象中的 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\nexport const decode = value => {\n  if (!value) return value;\n  if (value.__type === 'Date' && value.iso) {\n    return new Date(value.iso);\n  }\n  if (Array.isArray(value)) {\n    return value.map(decode);\n  }\n  if (isPlainObject(value)) {\n    return Object.keys(value).reduce(\n      (result, key) => ({\n        ...result,\n        [key]: decode(value[key]),\n      }),\n      {}\n    );\n  }\n  return value;\n};\n/**\n * 将对象中的特殊类型编码为 LeanCloud 数据结构。\n * 目前仅会处理 Date 类型。\n * @private\n */\nexport const encode = value => {\n  if (value instanceof Date) return { __type: 'Date', iso: value.toJSON() };\n  if (Array.isArray(value)) {\n    return value.map(encode);\n  }\n  if (isPlainObject(value)) {\n    return Object.keys(value).reduce(\n      (result, key) => ({\n        ...result,\n        [key]: encode(value[key]),\n      }),\n      {}\n    );\n  }\n  return value;\n};\n\nexport const keyRemap = (keymap, obj) =>\n  Object.keys(obj).reduce((newObj, key) => {\n    const newKey = keymap[key] || key;\n    return Object.assign(newObj, {\n      [newKey]: obj[key],\n    });\n  }, {});\n\nexport const isIE10 =\n  global.navigator &&\n  global.navigator.userAgent &&\n  global.navigator.userAgent.indexOf('MSIE 10.') !== -1;\n\n/* eslint-disable no-proto */\nexport const getStaticProperty = (klass, property) =>\n  klass[property] ||\n  (klass.__proto__ ? getStaticProperty(klass.__proto__, property) : undefined);\n/* eslint-enable no-proto */\n\nexport const union = (a, b) => Array.from(new Set([...a, ...b]));\nexport const difference = (a, b) =>\n  Array.from((bSet => new Set(a.filter(x => !bSet.has(x))))(new Set(b)));\n\nconst map = new WeakMap();\n\n// protected property helper\nexport const internal = object => {\n  if (!map.has(object)) {\n    map.set(object, {});\n  }\n  return map.get(object);\n};\n\nexport const compact = (obj, filter) => {\n  if (!isPlainObject(obj)) return obj;\n  const object = Object.assign({}, obj);\n  // eslint-disable-next-line no-restricted-syntax\n  for (const prop in object) {\n    if ({}.hasOwnProperty.call(object, prop)) {\n      const value = object[prop];\n      if (value === filter) {\n        delete object[prop];\n      } else {\n        object[prop] = compact(value, filter);\n      }\n    }\n  }\n  return object;\n};\n\n// debug utility\nconst removeNull = obj => compact(obj, null);\nexport const trim = message => removeNull(JSON.parse(JSON.stringify(message)));\n\nexport const ensureArray = target => {\n  if (Array.isArray(target)) {\n    return target;\n  }\n  if (target === undefined || target === null) {\n    return [];\n  }\n  return [target];\n};\n\nexport const setValue = (target, key, value) => {\n  // '.' is not allowed in Class keys, escaping is not in concern now.\n  const segs = key.split('.');\n  const lastSeg = segs.pop();\n  let currentTarget = target;\n  segs.forEach(seg => {\n    if (currentTarget[seg] === undefined) currentTarget[seg] = {};\n    currentTarget = currentTarget[seg];\n  });\n  currentTarget[lastSeg] = value;\n  return target;\n};\n\nexport const isWeapp =\n  // eslint-disable-next-line no-undef\n  typeof wx === 'object' && typeof wx.connectSocket === 'function';\n\n// throttle decorator\nexport const throttle = wait => (target, property, descriptor) => {\n  const callback = descriptor.value;\n  // very naive, internal use only\n  if (callback.length) {\n    throw new Error('throttled function should not accept any arguments');\n  }\n  return {\n    ...descriptor,\n    value() {\n      let { throttleMeta } = internal(this);\n      if (!throttleMeta) {\n        throttleMeta = {};\n        internal(this).throttleMeta = throttleMeta;\n      }\n      let { [property]: propertyMeta } = throttleMeta;\n      if (!propertyMeta) {\n        propertyMeta = {};\n        throttleMeta[property] = propertyMeta;\n      }\n      const { previouseTimestamp = 0, timeout } = propertyMeta;\n      const now = Date.now();\n      const remainingTime = wait - (now - previouseTimestamp);\n      if (remainingTime <= 0) {\n        throttleMeta[property].previouseTimestamp = now;\n        callback.apply(this);\n      } else if (!timeout) {\n        propertyMeta.timeout = setTimeout(() => {\n          propertyMeta.previouseTimestamp = Date.now();\n          delete propertyMeta.timeout;\n          callback.apply(this);\n        }, remainingTime);\n      }\n    },\n  };\n};\n","// WebSocket with auto reconnecting feature, backup endpoint and EventEmitter interface.\n\nimport d from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport StateMachine from 'javascript-state-machine';\n\nimport WebSocket from 'ws';\n\nimport { ensureArray, tryAll, global } from './utils';\n\nconst debug = d('LC:WebSocketPlus');\n\nexport const OPEN = 'open';\nexport const DISCONNECT = 'disconnect';\nexport const RECONNECT = 'reconnect';\nexport const RETRY = 'retry';\nexport const SCHEDULE = 'schedule';\nexport const OFFLINE = 'offline';\nexport const ONLINE = 'online';\nexport const ERROR = 'error';\nexport const MESSAGE = 'message';\n\nconst HEARTBEAT_TIME = 180000;\nconst TIMEOUT_TIME = 380000;\n\nconst DEFAULT_RETRY_STRATEGY = attempt => Math.min(1000 * 2 ** attempt, 300000);\n\nconst requireConnected = (target, name, descriptor) =>\n  Object.assign({}, descriptor, {\n    value: function requireConnectedWrapper(...args) {\n      this.checkConnectionAvailability(name);\n      return descriptor.value.call(this, ...args);\n    },\n  });\n\nclass WebSocketPlus extends EventEmitter {\n  get urls() {\n    return this._urls;\n  }\n\n  set urls(urls) {\n    this._urls = ensureArray(urls);\n  }\n\n  constructor(getUrls, protocol) {\n    if (typeof WebSocket === 'undefined') {\n      throw new Error(\n        'WebSocket is undefined. Polyfill is required in this runtime.'\n      );\n    }\n    super();\n    this.init();\n    this._protocol = protocol;\n    Promise.resolve(typeof getUrls === 'function' ? getUrls() : getUrls)\n      .then(ensureArray)\n      .then(urls => {\n        this._urls = urls;\n        return this._open();\n      })\n      .then(() => {\n        this.__postponeTimeoutTimer = this._postponeTimeoutTimer.bind(this);\n        if (global.addEventListener) {\n          this.__pause = () => {\n            if (this.can('pause')) this.pause();\n          };\n          this.__resume = () => {\n            if (this.can('resume')) this.resume();\n          };\n          global.addEventListener('offline', this.__pause);\n          global.addEventListener('online', this.__resume);\n        }\n        this.open();\n      })\n      .catch(this.throw.bind(this));\n  }\n\n  _open() {\n    return this._createWs(this._urls, this._protocol).then(ws => {\n      const [first, ...reset] = this._urls;\n      this._urls = [...reset, first];\n      return ws;\n    });\n  }\n\n  _createWs(urls, protocol) {\n    return tryAll(\n      urls.map(url => (resolve, reject) => {\n        debug(`connect [${url}] ${protocol}`);\n        const ws = protocol ? new WebSocket(url, protocol) : new WebSocket(url);\n        ws.binaryType = this.binaryType || 'arraybuffer';\n        ws.onopen = () => resolve(ws);\n        ws.onclose = error => {\n          if (error instanceof Error) {\n            return reject(error);\n          }\n          // in browser, error event is useless\n          return reject(new Error(`Failed to connect [${url}]`));\n        };\n        ws.onerror = ws.onclose;\n      })\n    ).then(ws => {\n      this._ws = ws;\n      this._ws.onclose = this._handleClose.bind(this);\n      this._ws.onmessage = this._handleMessage.bind(this);\n      return ws;\n    });\n  }\n\n  _destroyWs() {\n    const ws = this._ws;\n    if (!ws) return;\n    ws.onopen = null;\n    ws.onclose = null;\n    ws.onerror = null;\n    ws.onmessage = null;\n    this._ws = null;\n    ws.close();\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  onbeforeevent(event, from, to, ...payload) {\n    debug(`${event}: ${from} -> ${to}`, ...payload);\n  }\n\n  onopen() {\n    this.emit(OPEN);\n  }\n\n  onconnected() {\n    this._startConnectionKeeper();\n  }\n\n  onleaveconnected(event, from, to) {\n    this._stopConnectionKeeper();\n    this._destroyWs();\n    if (to === 'offline' || to === 'disconnected') {\n      this.emit(DISCONNECT);\n    }\n  }\n\n  onpause() {\n    this.emit(OFFLINE);\n  }\n\n  onbeforeresume() {\n    this.emit(ONLINE);\n  }\n\n  onreconnect() {\n    this.emit(RECONNECT);\n  }\n\n  ondisconnected(event, from, to, attempt = 0) {\n    const delay = DEFAULT_RETRY_STRATEGY.call(null, attempt);\n    debug(`schedule attempt=${attempt} delay=${delay}`);\n    this.emit(SCHEDULE, attempt, delay);\n    if (this.__scheduledRetry) {\n      clearTimeout(this.__scheduledRetry);\n    }\n    this.__scheduledRetry = setTimeout(() => {\n      if (this.is('disconnected')) {\n        this.retry(attempt);\n      }\n    }, delay);\n  }\n\n  onretry(event, from, to, attempt = 0) {\n    this.emit(RETRY, attempt);\n    this._open().then(\n      () => (this.can('reconnect') ? this.reconnect() : this._destroyWs()),\n      () => this.can('fail') && this.fail(attempt + 1)\n    );\n  }\n\n  onerror(event, from, to, error) {\n    this.emit(ERROR, error);\n  }\n\n  onclose() {\n    if (global.removeEventListener) {\n      if (this.__pause) global.removeEventListener('offline', this.__pause);\n      if (this.__resume) global.removeEventListener('online', this.__resume);\n    }\n  }\n\n  checkConnectionAvailability(name = 'API') {\n    if (!this.is('connected')) {\n      const currentState = this.current;\n      console.warn(\n        `${name} should not be called when the connection is ${currentState}`\n      );\n      if (this.is('disconnected') || this.is('reconnecting')) {\n        console.warn(\n          'disconnect and reconnect event should be handled to avoid such calls.'\n        );\n      }\n      throw new Error('Connection unavailable');\n    }\n  }\n\n  // jsdoc-ignore-start\n  @requireConnected\n  // jsdoc-ignore-end\n  _ping() {\n    debug('ping');\n    try {\n      this.ping();\n    } catch (error) {\n      console.warn(`websocket ping error: ${error.message}`);\n    }\n  }\n\n  ping() {\n    if (this._ws.ping) {\n      this._ws.ping();\n    } else {\n      console.warn(`The WebSocket implement does not support sending ping frame.\n        Override ping method to use application defined ping/pong mechanism.`);\n    }\n  }\n\n  _postponeTimeoutTimer() {\n    debug('_postponeTimeoutTimer');\n    this._clearTimeoutTimers();\n    this._timeoutTimer = setTimeout(() => {\n      debug('timeout');\n      this.disconnect();\n    }, TIMEOUT_TIME);\n  }\n\n  _clearTimeoutTimers() {\n    if (this._timeoutTimer) {\n      clearTimeout(this._timeoutTimer);\n    }\n  }\n\n  _startConnectionKeeper() {\n    debug('start connection keeper');\n    this._heartbeatTimer = setInterval(this._ping.bind(this), HEARTBEAT_TIME);\n    const addListener = this._ws.addListener || this._ws.addEventListener;\n    addListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n    addListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n    this._postponeTimeoutTimer();\n  }\n\n  _stopConnectionKeeper() {\n    debug('stop connection keeper');\n    // websockets/ws#489\n    const removeListener =\n      this._ws.removeListener || this._ws.removeEventListener;\n    removeListener.call(this._ws, 'message', this.__postponeTimeoutTimer);\n    removeListener.call(this._ws, 'pong', this.__postponeTimeoutTimer);\n    this._clearTimeoutTimers();\n    if (this._heartbeatTimer) {\n      clearInterval(this._heartbeatTimer);\n    }\n  }\n\n  _handleClose(event) {\n    debug(`ws closed [${event.code}] ${event.reason}`);\n    // socket closed manually, ignore close event.\n    if (this.isFinished()) return;\n    this.handleClose(event);\n  }\n\n  handleClose() {\n    // reconnect\n    this.disconnect();\n  }\n\n  // jsdoc-ignore-start\n  @requireConnected\n  // jsdoc-ignore-end\n  send(data) {\n    debug('send', data);\n    this._ws.send(data);\n  }\n\n  _handleMessage(event) {\n    debug('message', event.data);\n    this.handleMessage(event.data);\n  }\n\n  handleMessage(message) {\n    this.emit(MESSAGE, message);\n  }\n}\n\nStateMachine.create({\n  target: WebSocketPlus.prototype,\n  initial: {\n    state: 'initialized',\n    event: 'init',\n    defer: true,\n  },\n  terminal: 'closed',\n  events: [\n    {\n      name: 'open',\n      from: 'initialized',\n      to: 'connected',\n    },\n    {\n      name: 'disconnect',\n      from: 'connected',\n      to: 'disconnected',\n    },\n    {\n      name: 'retry',\n      from: 'disconnected',\n      to: 'reconnecting',\n    },\n    {\n      name: 'fail',\n      from: 'reconnecting',\n      to: 'disconnected',\n    },\n    {\n      name: 'reconnect',\n      from: 'reconnecting',\n      to: 'connected',\n    },\n    {\n      name: 'pause',\n      from: ['connected', 'disconnected', 'reconnecting'],\n      to: 'offline',\n    },\n    {},\n    {\n      name: 'resume',\n      from: 'offline',\n      to: 'disconnected',\n    },\n    {\n      name: 'close',\n      from: ['connected', 'disconnected', 'reconnecting', 'offline'],\n      to: 'closed',\n    },\n    {\n      name: 'throw',\n      from: '*',\n      to: 'error',\n    },\n  ],\n});\n\nexport default WebSocketPlus;\n","export const error = Object.freeze({\n  1000: {\n    name: 'CLOSE_NORMAL',\n  },\n  1006: {\n    name: 'CLOSE_ABNORMAL',\n  },\n  4100: {\n    name: 'APP_NOT_AVAILABLE',\n    message: 'App not exists or realtime message service is disabled.',\n  },\n  4102: {\n    name: 'SIGNATURE_FAILED',\n    message: 'Login signature mismatch.',\n  },\n  4103: {\n    name: 'INVALID_LOGIN',\n    message: 'Malformed clientId.',\n  },\n  4105: {\n    name: 'SESSION_REQUIRED',\n    message: 'Message sent before session opened.',\n  },\n  4107: {\n    name: 'READ_TIMEOUT',\n  },\n  4108: {\n    name: 'LOGIN_TIMEOUT',\n  },\n  4109: {\n    name: 'FRAME_TOO_LONG',\n  },\n  4110: {\n    name: 'INVALID_ORIGIN',\n    message: 'Access denied by domain whitelist.',\n  },\n  4111: {\n    name: 'SESSION_CONFLICT',\n  },\n  4112: {\n    name: 'SESSION_TOKEN_EXPIRED',\n  },\n  4113: {\n    name: 'APP_QUOTA_EXCEEDED',\n    message: 'The daily active users limit exceeded.',\n  },\n  4116: {\n    name: 'MESSAGE_SENT_QUOTA_EXCEEDED',\n    message: 'Command sent too fast.',\n  },\n  4200: {\n    name: 'INTERNAL_ERROR',\n    message: 'Internal error, please contact LeanCloud for support.',\n  },\n  4301: {\n    name: 'CONVERSATION_API_FAILED',\n    message: 'Upstream Conversatoin API failed, see error.detail for details.',\n  },\n  4302: {\n    name: 'CONVERSATION_SIGNATURE_FAILED',\n    message: 'Conversation action signature mismatch.',\n  },\n  4303: {\n    name: 'CONVERSATION_NOT_FOUND',\n  },\n  4304: {\n    name: 'CONVERSATION_FULL',\n  },\n  4305: {\n    name: 'CONVERSATION_REJECTED_BY_APP',\n    message: 'Conversation action rejected by hook.',\n  },\n  4306: {\n    name: 'CONVERSATION_UPDATE_FAILED',\n  },\n  4307: {\n    name: 'CONVERSATION_READ_ONLY',\n  },\n  4308: {\n    name: 'CONVERSATION_NOT_ALLOWED',\n  },\n  4309: {\n    name: 'CONVERSATION_UPDATE_REJECTED',\n    message: 'Conversation update rejected because the client is not a member.',\n  },\n  4310: {\n    name: 'CONVERSATION_QUERY_FAILED',\n    message: 'Conversation query failed because it is too expansive.',\n  },\n  4311: {\n    name: 'CONVERSATION_LOG_FAILED',\n  },\n  4312: {\n    name: 'CONVERSATION_LOG_REJECTED',\n    message:\n      'Message query rejected because the client is not a member of the conversation.',\n  },\n  4313: {\n    name: 'SYSTEM_CONVERSATION_REQUIRED',\n  },\n  4314: {\n    name: 'NORMAL_CONVERSATION_REQUIRED',\n  },\n  4315: {\n    name: 'CONVERSATION_BLACKLISTED',\n    message: 'Blacklisted in the conversation.',\n  },\n  4316: {\n    name: 'TRANSIENT_CONVERSATION_REQUIRED',\n  },\n  4317: {\n    name: 'CONVERSATION_MEMBERSHIP_REQUIRED',\n  },\n  4318: {\n    name: 'CONVERSATION_API_QUOTA_EXCEEDED',\n    message: 'LeanCloud API quota exceeded. You may upgrade your plan.',\n  },\n  4323: {\n    name: 'TEMPORARY_CONVERSATION_EXPIRED',\n    message: 'Temporary conversation expired or does not exist.',\n  },\n  4401: {\n    name: 'INVALID_MESSAGING_TARGET',\n    message: 'Conversation does not exist or client is not a member.',\n  },\n  4402: {\n    name: 'MESSAGE_REJECTED_BY_APP',\n    message: 'Message rejected by hook.',\n  },\n  4403: {\n    name: 'MESSAGE_OWNERSHIP_REQUIRED',\n  },\n  4404: {\n    name: 'MESSAGE_NOT_FOUND',\n  },\n  4405: {\n    name: 'MESSAGE_UPDATE_REJECTED_BY_APP',\n    message: 'Message update rejected by hook.',\n  },\n  4406: {\n    name: 'MESSAGE_EDIT_DISABLED',\n  },\n  4407: {\n    name: 'MESSAGE_RECALL_DISABLED',\n  },\n  5130: {\n    name: 'OWNER_PROMOTION_NOT_ALLOWED',\n    message: \"Updating a member's role to owner is not allowed.\",\n  },\n});\n\nexport const ErrorCode = Object.freeze(\n  Object.keys(error).reduce(\n    (result, code) =>\n      Object.assign(result, {\n        [error[code].name]: Number(code),\n      }),\n    {}\n  )\n);\n\nexport const createError = ({\n  code,\n  reason,\n  appCode,\n  detail,\n  error: errorMessage,\n}) => {\n  let message = reason || detail || errorMessage;\n  let name = reason;\n  if (!message && error[code]) {\n    ({ name } = error[code]);\n    message = error[code].message || name;\n  }\n  if (!message) {\n    message = `Unknow Error: ${code}`;\n  }\n  const err = new Error(message);\n  return Object.assign(err, {\n    code,\n    appCode,\n    detail,\n    name,\n  });\n};\n","import d from 'debug';\nimport WebSocketPlus, {\n  OPEN,\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n  ERROR,\n  MESSAGE,\n} from './websocket-plus';\nimport { createError } from './error';\nimport { GenericCommand, CommandType } from '../proto/message';\nimport { trim, isWeapp } from './utils';\n\nconst debug = d('LC:Connection');\n\nconst COMMAND_TIMEOUT = 20000;\n\nconst EXPIRE = Symbol('expire');\n\nexport {\n  OPEN,\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n  ERROR,\n  MESSAGE,\n  EXPIRE,\n};\n\nexport default class Connection extends WebSocketPlus {\n  constructor(getUrl, { format, version }) {\n    debug('initializing Connection');\n    const protocolString = `lc.${format}.${version}`;\n    if (!isWeapp) {\n      super(getUrl, protocolString);\n    } else {\n      super(\n        getUrl().then(urls =>\n          urls.map(\n            url =>\n              `${url}${\n                url.indexOf('?') === -1 ? '?' : '&'\n              }subprotocol=${encodeURIComponent(protocolString)}`\n          )\n        )\n      );\n    }\n    this._protocalFormat = format;\n    this._commands = {};\n    this._serialId = 0;\n  }\n\n  async send(command, waitingForRespond = true) {\n    let serialId;\n    if (waitingForRespond) {\n      this._serialId += 1;\n      serialId = this._serialId;\n      command.i = serialId; // eslint-disable-line no-param-reassign\n    }\n    if (debug.enabled) debug('↑ %O sent', trim(command));\n\n    let message;\n    if (this._protocalFormat === 'proto2base64') {\n      message = command.toBase64();\n    } else if (command.toArrayBuffer) {\n      message = command.toArrayBuffer();\n    }\n    if (!message) {\n      throw new TypeError(`${command} is not a GenericCommand`);\n    }\n\n    super.send(message);\n\n    if (!waitingForRespond) return undefined;\n    return new Promise((resolve, reject) => {\n      this._commands[serialId] = {\n        resolve,\n        reject,\n        timeout: setTimeout(() => {\n          if (this._commands[serialId]) {\n            if (debug.enabled) debug('✗ %O timeout', trim(command));\n            reject(\n              createError({\n                error: `Command Timeout [cmd:${command.cmd} op:${command.op}]`,\n                name: 'COMMAND_TIMEOUT',\n              })\n            );\n            delete this._commands[serialId];\n          }\n        }, COMMAND_TIMEOUT),\n      };\n    });\n  }\n\n  handleMessage(msg) {\n    let message;\n    try {\n      message = GenericCommand.decode(msg);\n      if (debug.enabled) debug('↓ %O received', trim(message));\n    } catch (e) {\n      console.warn('Decode message failed:', e.message, msg);\n      return;\n    }\n    const serialId = message.i;\n    if (serialId) {\n      if (this._commands[serialId]) {\n        clearTimeout(this._commands[serialId].timeout);\n        if (message.cmd === CommandType.error) {\n          this._commands[serialId].reject(createError(message.errorMessage));\n        } else {\n          this._commands[serialId].resolve(message);\n        }\n        delete this._commands[serialId];\n      } else {\n        console.warn(`Unexpected command received with serialId [${serialId}],\n         which have timed out or never been requested.`);\n      }\n    } else {\n      switch (message.cmd) {\n        case CommandType.error: {\n          this.emit(ERROR, createError(message.errorMessage));\n          return;\n        }\n        case CommandType.goaway: {\n          this.emit(EXPIRE);\n          return;\n        }\n        default: {\n          this.emit(MESSAGE, message);\n        }\n      }\n    }\n  }\n\n  ping() {\n    return this.send(\n      new GenericCommand({\n        cmd: CommandType.echo,\n      })\n    ).catch(error => debug('ping failed:', error));\n  }\n}\n","/* eslint-disable max-len */\n\n/**\n * 插件接口\n *\n * <p>\n * 插件是由一个或多个扩展点组成的字典。SDK 的扩展点可以分为两类：\n * <p>\n * 第一类扩展点是类实例化之后的回调，包括 <code>Realtime</code>、<code>IMClient</code> 与 <code>Conversation</code>。这些扩展点可以通过一个同步的 Decorator 进行扩展。Decorator 接受一个对应的实例并对其进行一些操作。\n * 特别的，由于注册自定义消息类这个需求特别的常用，额外定义一个 messageClasses 扩展点来做这件事情。\n * <p>\n * 第二类扩展点是在某些事件处理前、后可以注入逻辑的点。\n * 其中 <code>beforeMessageParse</code>，<code>afterMessageParse</code> 可以通过一个异步的 Middleware 进行扩展。Middleware 接受一个对象，返回一个同类型对象或同类型对象的 Promise。\n * <code>beforeMessageDispatch</code> 可以通过返回一个 boolean 类型的 shouldDispatch 值来控制是否要继续派发收到的消息。\n * <p>\n * 如果使用了多个插件，这些 hook 会按照插件数组的顺序依次执行。前一个 Middleware 的返回值会作为参数传给后一个 Middleware。\n *\n * @interface Plugin\n * @since 3.1.0\n */\n\n/* eslint-enable max-len */\n\n/**\n * 插件名称，用于在日志中显示异常的插件\n *\n * @name Plugin.name\n * @type string\n */\n\n/**\n * 插件注册的消息类型\n *\n * @name Plugin.messageClasses\n * @type AVMessage[]\n */\n\n/**\n * 在 Realtime 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 Realtime 实例。\n *\n * @name Plugin.onRealtimeCreate\n * @type Function\n */\n\n/**\n * 在 IMClient 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 IMClient 实例。\n *\n * @name Plugin.onIMClientCreate\n * @type Function\n */\n\n/**\n * 在 Conversation 实例化后对其进行修饰。\n * <p>\n * 接受一个参数为 Conversation 实例。\n * 需要注意的是，该扩展点并不是在 <code>{@link IMClient#createConversation}</code> 方法创建成功后调用的 hook，\n * 而是所有的 Conversation 实例化的时候（包括但不限于 query 时）调用的 hook。\n *\n * @name Plugin.onConversationCreate\n * @type Function\n */\n\n/**\n * 在对消息进行 parse 之前，对原始消息进行修改。\n * <p>\n * 接受一个参数为原始消息，是某个消息的内容，一般是一个 JSON 对象。\n * 该方法需要返回一个 JSON 对象。如果这个结果是异步得到的，也可以返回一个 Promise(fulfilled with a JSON)。\n *\n * @name Plugin.beforeMessageParse\n * @type Function\n */\n\n/**\n * 在对消息进行 parse 之后，对消息实例进行修改。\n * <p>\n * 接受一个参数为消息实例，一般是一个已注册的 Message 类或其子类的实例。\n * 该方法需要返回一个同类型的消息实例。如果这个结果是异步得到的，也可以返回一个 Promise。\n *\n * @name Plugin.afterMessageParse\n * @type Function\n */\n\n/**\n * 在收到消息之后，派发消息之前，控制是否派发这条消息。\n * <p>\n * 接受参数为 message 与 conversation。\n * 该方法需要返回 boolean 类型的值，如果返回 false 则 SDK 不再派发这条消息，后续的 beforeMessageDispatch 也不会执行。\n * 如果这个结果是异步得到的，也可以返回一个 Promise。\n *\n * @name Plugin.beforeMessageDispatch\n * @type Function\n * @since 3.4.0\n */\n\nimport { ensureArray, tap } from './utils';\n\nconst checkType = middleware => param => {\n  const { constructor } = param;\n  return Promise.resolve(param)\n    .then(middleware)\n    .then(\n      tap(result => {\n        if (result === undefined || result === null) {\n          // eslint-disable-next-line max-len\n          return console.warn(\n            `Middleware[${middleware._pluginName ||\n              'anonymous plugin'}:${middleware.name ||\n              'anonymous middleware'}] param/return types not match. It returns ${result} while a ${\n              param.constructor.name\n            } expected.`\n          );\n        }\n        if (!(result instanceof constructor)) {\n          // eslint-disable-next-line max-len\n          return console.warn(\n            `Middleware[${middleware._pluginName ||\n              'anonymous plugin'}:${middleware.name ||\n              'anonymous middleware'}] param/return types not match. It returns a ${\n              result.constructor.name\n            } while a ${param.constructor.name} expected.`\n          );\n        }\n        return 0;\n      })\n    );\n};\n\nexport const applyDecorators = (decorators, target) => {\n  if (decorators) {\n    decorators.forEach(decorator => {\n      try {\n        decorator(target);\n      } catch (error) {\n        if (decorator._pluginName) {\n          error.message += `[${decorator._pluginName}]`;\n        }\n        throw error;\n      }\n    });\n  }\n};\n\nexport const applyMiddlewares = middlewares => target =>\n  ensureArray(middlewares).reduce(\n    (previousPromise, middleware) =>\n      previousPromise.then(checkType(middleware)).catch(error => {\n        if (middleware._pluginName) {\n          // eslint-disable-next-line no-param-reassign\n          error.message += `[${middleware._pluginName}]`;\n        }\n        throw error;\n      }),\n    Promise.resolve(target)\n  );\n\nexport const applyDispatcher = (dispatchers, payload) =>\n  ensureArray(dispatchers).reduce(\n    (resultPromise, dispatcher) =>\n      resultPromise\n        .then(\n          shouldDispatch =>\n            shouldDispatch === false ? false : dispatcher(...payload)\n        )\n        .catch(error => {\n          if (dispatcher._pluginName) {\n            // eslint-disable-next-line no-param-reassign\n            error.message += `[${dispatcher._pluginName}]`;\n          }\n          throw error;\n        }),\n    Promise.resolve(true)\n  );\n","import d from 'debug';\nimport EventEmitter from 'eventemitter3';\nimport axios from 'axios';\nimport shuffle from 'lodash/shuffle';\nimport Connection, {\n  OPEN,\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n  ERROR,\n  MESSAGE,\n  EXPIRE,\n} from './connection';\nimport { ErrorCode, createError } from './error';\nimport { tap, Cache, trim, internal, ensureArray, isWeapp } from './utils';\nimport { applyDecorators, applyDispatcher } from './plugin';\nimport { version as VERSION } from '../package.json';\n\nconst debug = d('LC:Realtime');\nconst debugRequest = d('LC:request');\n\nconst routerCache = new Cache('push-router');\n\nexport default class Realtime extends EventEmitter {\n  /**\n   * @extends EventEmitter\n   * @param  {Object} options\n   * @param  {String} options.appId\n   * @param  {String} options.appKey （since 4.0.0）\n   * @param  {Boolean} [options.pushOfflineMessages=false] 启用推送离线消息模式（默认为发送未读消息通知模式）\n   * @param  {Boolean} [options.noBinary=false] 设置 WebSocket 使用字符串格式收发消息（默认为二进制格式）。\n   *                                            适用于 WebSocket 实现不支持二进制数据格式的情况\n   * @param  {Boolean} [options.ssl=true] 使用 wss 进行连接\n   * @param  {String|Object} [options.server] 指定私有部署的服务器域名（since 4.0.0）\n   * @param  {String|String[]} [options.RTMServers] 指定私有部署的 RTM 服务器地址（since 4.0.0）\n   * @param  {Plugin[]} [options.plugins] 加载插件（since 3.1.0）\n   */\n  constructor({ plugins, ...options }) {\n    debug('initializing Realtime %s %O', VERSION, options);\n    super();\n    if (typeof options.appId !== 'string') {\n      throw new TypeError(`appId [${options.appId}] is not a string`);\n    }\n    if (typeof options.appKey !== 'string') {\n      throw new TypeError(`appKey [${options.appKey}] is not a string`);\n    }\n    this._options = Object.assign(\n      {\n        appId: undefined,\n        appKey: undefined,\n        pushOfflineMessages: false,\n        noBinary: false,\n        ssl: true,\n        RTMServerName: process.env.RTM_SERVER_NAME, // undocumented on purpose, internal use only\n      },\n      options\n    );\n    this._cache = new Cache('endpoints');\n    const _this = internal(this);\n    _this.clients = new Set();\n    _this.pendingClients = new Set();\n    const mergedPlugins = [\n      ...ensureArray(Realtime.__preRegisteredPlugins),\n      ...ensureArray(plugins),\n    ];\n    debug('Using plugins %o', mergedPlugins.map(plugin => plugin.name));\n    this._plugins = mergedPlugins.reduce((result, plugin) => {\n      // eslint-disable-next-line no-restricted-syntax\n      for (const hook in plugin) {\n        if ({}.hasOwnProperty.call(plugin, hook) && hook !== 'name') {\n          if (plugin.name) {\n            ensureArray(plugin[hook]).forEach(value => {\n              // eslint-disable-next-line no-param-reassign\n              value._pluginName = plugin.name;\n            });\n          }\n          // eslint-disable-next-line no-param-reassign\n          result[hook] = ensureArray(result[hook]).concat(plugin[hook]);\n        }\n      }\n      return result;\n    }, {});\n    // onRealtimeCreate hook\n    applyDecorators(this._plugins.onRealtimeCreate, this);\n  }\n\n  async _request({ method, version = '1.1', path, query, headers, data = {} }) {\n    const { appId, server } = this._options;\n    const { api } = await this.constructor._getServerUrls({\n      appId,\n      server,\n    });\n    const url = `https://${api}/${version}${path}`;\n    const options = {\n      method,\n      params: query,\n      headers: {\n        'X-LC-Id': this._options.appId,\n        'X-LC-Key': this._options.appKey,\n        ...headers,\n      },\n      data,\n    };\n    debugRequest('Req: %O %O', url, options);\n    return axios(url, options).then(\n      response => {\n        debugRequest('Res: %O %O %O', url, response.status, response.data);\n        return response.data;\n      },\n      error => {\n        debugRequest(\n          'Error: %O %O %O',\n          url,\n          error.response.status,\n          error.response.data\n        );\n        if (error.response && error.response.data && error.response.data.code) {\n          throw createError(error.response.data);\n        }\n        throw error;\n      }\n    );\n  }\n\n  _open() {\n    if (this._openPromise) return this._openPromise;\n\n    let format = 'protobuf2';\n    if (this._options.noBinary) {\n      // 不发送 binary data，fallback to base64 string\n      format = 'proto2base64';\n    }\n    let version = 3;\n    if (this._options.pushOfflineMessages) {\n      // 不推送离线消息，而是发送对话的未读通知\n      version = 1;\n    }\n    const protocol = {\n      format,\n      version,\n    };\n    this._openPromise = new Promise((resolve, reject) => {\n      debug('No connection established, create a new one.');\n      const connection = new Connection(\n        () => this._getRTMServers(this._options),\n        protocol\n      );\n      connection\n        .on(OPEN, () => resolve(connection))\n        .on(ERROR, reject)\n        .on(EXPIRE, async () => {\n          debug('Connection expired. Refresh endpoints.');\n          this._cache.set('endpoints', null, 0);\n          connection.urls = await this._getRTMServers(this._options);\n          connection.disconnect();\n        })\n        .on(MESSAGE, this._dispatchCommand.bind(this));\n      /**\n       * 连接断开。\n       * 连接断开可能是因为 SDK 进入了离线状态（see {@link Realtime#event:OFFLINE}），或长时间没有收到服务器心跳。\n       * 连接断开后所有的网络操作都会失败，请在连接断开后禁用相关的 UI 元素。\n       * @event Realtime#DISCONNECT\n       */\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event Realtime#SCHEDULE\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       */\n      /**\n       * 正在尝试重新连接\n       * @event Realtime#RETRY\n       * @param {Number} attempt 尝试重连的次数\n       */\n      /**\n       * 连接恢复正常。\n       * 请重新启用在 {@link Realtime#event:DISCONNECT} 事件中禁用的相关 UI 元素\n       * @event Realtime#RECONNECT\n       */\n\n      /**\n       * 客户端连接断开\n       * @event IMClient#DISCONNECT\n       * @see Realtime#event:DISCONNECT\n       * @since 3.2.0\n       */\n      /**\n       * 计划在一段时间后尝试重新连接\n       * @event IMClient#SCHEDULE\n       * @param {Number} attempt 尝试重连的次数\n       * @param {Number} delay 延迟的毫秒数\n       * @since 3.2.0\n       */\n      /**\n       * 正在尝试重新连接\n       * @event IMClient#RETRY\n       * @param {Number} attempt 尝试重连的次数\n       * @since 3.2.0\n       */\n\n      /**\n       * 客户端进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event Realtime#OFFLINE\n       * @since 3.4.0\n       */\n      /**\n       * 客户端恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event Realtime#ONLINE\n       * @since 3.4.0\n       */\n      /**\n       * 进入离线状态。\n       * 这通常意味着网络已断开，或者 {@link Realtime#pause} 被调用\n       * @event IMClient#OFFLINE\n       * @since 3.4.0\n       */\n      /**\n       * 恢复在线状态\n       * 这通常意味着网络已恢复，或者 {@link Realtime#resume} 被调用\n       * @event IMClient#ONLINE\n       * @since 3.4.0\n       */\n\n      // event proxy\n      [DISCONNECT, RECONNECT, RETRY, SCHEDULE, OFFLINE, ONLINE].forEach(event =>\n        connection.on(event, (...payload) => {\n          debug(`${event} event emitted. %o`, payload);\n          this.emit(event, ...payload);\n          if (event !== RECONNECT) {\n            internal(this).clients.forEach(client => {\n              client.emit(event, ...payload);\n            });\n          }\n        })\n      );\n      // override handleClose\n      connection.handleClose = function handleClose(event) {\n        const isFatal = [\n          ErrorCode.APP_NOT_AVAILABLE,\n          ErrorCode.INVALID_LOGIN,\n          ErrorCode.INVALID_ORIGIN,\n        ].some(errorCode => errorCode === event.code);\n        if (isFatal) {\n          // in these cases, SDK should throw.\n          this.throw(createError(event));\n        } else {\n          // reconnect\n          this.disconnect();\n        }\n      };\n      internal(this).connection = connection;\n    });\n\n    return this._openPromise;\n  }\n\n  async _getRTMServers(options) {\n    if (options.RTMServers) return shuffle(ensureArray(options.RTMServers));\n    let info;\n    const cachedEndPoints = this._cache.get('endpoints');\n    if (cachedEndPoints) {\n      info = await cachedEndPoints;\n    } else {\n      info = await this.constructor._fetchRTMServers(options);\n      this._cache.set('endpoints', info, info.ttl * 1000);\n    }\n    debug('endpoint info: %O', info);\n    return [info.server, info.secondary];\n  }\n\n  static async _getServerUrls({ appId, server }) {\n    debug('fetch server urls');\n    if (server) {\n      if (typeof server !== 'string') return server;\n      return {\n        RTMRouter: server,\n        api: server,\n      };\n    }\n    const cachedRouter = routerCache.get(appId);\n    if (cachedRouter) return cachedRouter;\n    return axios\n      .get('https://app-router.leancloud.cn/2/route', {\n        params: {\n          appId,\n        },\n        timeout: 20000,\n      })\n      .then(res => res.data)\n      .then(tap(debug))\n      .then(({ rtm_router_server: RTMRouter, api_server: api, ttl = 3600 }) => {\n        if (!RTMRouter) {\n          throw new Error('rtm router not exists');\n        }\n        const serverUrls = {\n          RTMRouter,\n          api,\n        };\n        routerCache.set(appId, serverUrls, ttl * 1000);\n        return serverUrls;\n      })\n      .catch(() => {\n        const id = appId.slice(0, 8).toLowerCase();\n        let domain;\n        switch (appId.slice(-9)) {\n          case '-9Nh9j0Va':\n            // TAB\n            domain = 'lncldapi.com';\n            break;\n          case '-MdYXbMMI':\n            // US\n            domain = 'lncldglobal.com';\n            break;\n          default:\n            domain = 'lncld.net';\n        }\n        return {\n          RTMRouter: `${id}.rtm.${domain}`,\n          api: `${id}.api.${domain}`,\n        };\n      });\n  }\n\n  static _fetchRTMServers({ appId, ssl, server, RTMServerName }) {\n    debug('fetch endpoint info');\n    return this._getServerUrls({ appId, server })\n      .then(tap(debug))\n      .then(({ RTMRouter }) =>\n        axios\n          .get(`https://${RTMRouter}/v1/route`, {\n            params: {\n              appId,\n              secure: ssl,\n              features: isWeapp ? 'wechat' : undefined,\n              server: RTMServerName,\n              _t: Date.now(),\n            },\n            timeout: 20000,\n          })\n          .then(res => res.data)\n          .then(tap(debug))\n      );\n  }\n\n  _close() {\n    if (this._openPromise) {\n      this._openPromise.then(connection => connection.close());\n    }\n    delete this._openPromise;\n  }\n\n  /**\n   * 手动进行重连。\n   * SDK 在网络出现异常时会自动按照一定的时间间隔尝试重连，调用该方法会立即尝试重连并重置重连尝试计数器。\n   * 只能在 `SCHEDULE` 事件之后，`RETRY` 事件之前调用，如果当前网络正常或者正在进行重连，调用该方法会抛异常。\n   */\n  retry() {\n    const { connection } = internal(this);\n    if (!connection) {\n      throw new Error('no connection established');\n    }\n    if (connection.cannot('retry')) {\n      throw new Error(\n        `retrying not allowed when not disconnected. the connection is now ${\n          connection.current\n        }`\n      );\n    }\n    return connection.retry();\n  }\n\n  /**\n   * 暂停，使 SDK 进入离线状态。\n   * 你可以在网络断开、应用进入后台等时刻调用该方法让 SDK 进入离线状态，离线状态下不会尝试重连。\n   * 在浏览器中 SDK 会自动监听网络变化，因此无需手动调用该方法。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:OFFLINE\n   */\n  pause() {\n    // 这个方法常常在网络断开、进入后台时被调用，此时 connection 可能没有建立或者已经 close。\n    // 因此不像 retry，这个方法应该尽可能 loose\n    const { connection } = internal(this);\n    if (!connection) return;\n    if (connection.can('pause')) connection.pause();\n  }\n\n  /**\n   * 恢复在线状态。\n   * 你可以在网络恢复、应用回到前台等时刻调用该方法让 SDK 恢复在线状态，恢复在线状态后 SDK 会开始尝试重连。\n   *\n   * @since 3.4.0\n   * @see Realtime#event:ONLINE\n   */\n  resume() {\n    // 与 pause 一样，这个方法应该尽可能 loose\n    const { connection } = internal(this);\n    if (!connection) return;\n    if (connection.can('resume')) connection.resume();\n  }\n\n  _registerPending(value) {\n    internal(this).pendingClients.add(value);\n  }\n\n  _deregisterPending(client) {\n    internal(this).pendingClients.delete(client);\n  }\n\n  _register(client) {\n    internal(this).clients.add(client);\n  }\n\n  _deregister(client) {\n    const _this = internal(this);\n    _this.clients.delete(client);\n    if (_this.clients.size + _this.pendingClients.size === 0) {\n      this._close();\n    }\n  }\n\n  _dispatchCommand(command) {\n    return applyDispatcher(this._plugins.beforeCommandDispatch, [\n      command,\n      this,\n    ]).then(shouldDispatch => {\n      // no plugin handled this command\n      if (shouldDispatch)\n        return debug('[WARN] Unexpected message received: %O', trim(command));\n      return false;\n    });\n  }\n}\n","// IMClient\nexport const UNREAD_MESSAGES_COUNT_UPDATE = 'unreadmessagescountupdate';\nexport const CLOSE = 'close';\nexport const CONFLICT = 'conflict';\nexport const CONVERSATION_INFO_UPDATED = 'conversationinfoupdated';\nexport const UNHANDLED_MESSAGE = 'unhandledmessage';\n\n// shared\nexport const INVITED = 'invited';\nexport const KICKED = 'kicked';\nexport const MEMBERS_JOINED = 'membersjoined';\nexport const MEMBERS_LEFT = 'membersleft';\nexport const MEMBER_INFO_UPDATED = 'memberinfoupdated';\nexport const BLOCKED = 'blocked';\nexport const UNBLOCKED = 'unblocked';\nexport const MEMBERS_BLOCKED = 'membersblocked';\nexport const MEMBERS_UNBLOCKED = 'membersunblocked';\nexport const MUTED = 'muted';\nexport const UNMUTED = 'unmuted';\nexport const MEMBERS_MUTED = 'membersmuted';\nexport const MEMBERS_UNMUTED = 'membersunmuted';\nexport const MESSAGE = 'message';\nexport const MESSAGE_RECALL = 'messagerecall';\nexport const MESSAGE_UPDATE = 'messageupdate';\n\n// Conversation\nexport const LAST_DELIVERED_AT_UPDATE = 'lastdeliveredatupdate';\nexport const LAST_READ_AT_UPDATE = 'lastreadatupdate';\nexport const INFO_UPDATED = 'infoupdated';\n","import uuid from 'uuid/v4';\nimport { ensureArray, decodeDate, getTime } from '../utils';\n\n/**\n * 消息状态枚举\n * @enum {Symbol}\n * @since 3.2.0\n * @memberof module:leancloud-realtime\n */\nconst MessageStatus = {\n  /** 初始状态、未知状态 */\n  NONE: Symbol('none'),\n  /** 正在发送 */\n  SENDING: Symbol('sending'),\n  /** 已发送 */\n  SENT: Symbol('sent'),\n  /** 已送达 */\n  DELIVERED: Symbol('delivered'),\n  /** 发送失败 */\n  FAILED: Symbol('failed'),\n};\nObject.freeze(MessageStatus);\n\nconst rMessageStatus = {\n  [MessageStatus.NONE]: true,\n  [MessageStatus.SENDING]: true,\n  [MessageStatus.SENT]: true,\n  [MessageStatus.DELIVERED]: true,\n  [MessageStatus.READ]: true,\n  [MessageStatus.FAILED]: true,\n};\n\nexport { MessageStatus };\nexport default class Message {\n  /**\n   * @implements AVMessage\n   * @param  {Object|String|ArrayBuffer} content 消息内容\n   */\n  constructor(content) {\n    Object.assign(\n      this,\n      { content },\n      {\n        /**\n         * @type {String}\n         * @memberof Message#\n         */\n        id: uuid(),\n        /**\n         * 消息所在的 conversation id\n         * @memberof Message#\n         * @type {String?}\n         */\n        cid: null,\n        /**\n         * 消息发送时间\n         * @memberof Message#\n         * @type {Date}\n         */\n        timestamp: new Date(),\n        /**\n         * 消息发送者\n         * @memberof Message#\n         * @type {String}\n         */\n        from: undefined,\n        /**\n         * 消息提及的用户\n         * @since 4.0.0\n         * @memberof Message#\n         * @type {String[]}\n         */\n        mentionList: [],\n        /**\n         * 消息是否提及了所有人\n         * @since 4.0.0\n         * @memberof Message#\n         * @type {Boolean}\n         */\n        mentionedAll: false,\n        _mentioned: false,\n      }\n    );\n    this._setStatus(MessageStatus.NONE);\n  }\n\n  /**\n   * 将当前消息的内容序列化为 JSON 对象\n   * @private\n   * @return {Object}\n   */\n  getPayload() {\n    return this.content;\n  }\n\n  _toJSON() {\n    const {\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      updatedAt,\n      mentionList,\n      mentionedAll,\n      mentioned,\n    } = this;\n    return {\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      updatedAt,\n      mentionList,\n      mentionedAll,\n      mentioned,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的消息\n   * @return {Object} 返回值是一个 plain Object\n   */\n  toJSON() {\n    return {\n      ...this._toJSON(),\n      data: this.content,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的消息，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseMessage} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toFullJSON() {\n    const {\n      content,\n      id,\n      cid,\n      from,\n      timestamp,\n      deliveredAt,\n      _updatedAt,\n      mentionList,\n      mentionedAll,\n    } = this;\n    return {\n      data: content,\n      id,\n      cid,\n      from,\n      timestamp: getTime(timestamp),\n      deliveredAt: getTime(deliveredAt),\n      updatedAt: getTime(_updatedAt),\n      mentionList,\n      mentionedAll,\n    };\n  }\n\n  /**\n   * 消息状态，值为 {@link module:leancloud-realtime.MessageStatus} 之一\n   * @type {Symbol}\n   * @readonly\n   * @since 3.2.0\n   */\n  get status() {\n    return this._status;\n  }\n\n  _setStatus(status) {\n    if (!rMessageStatus[status]) {\n      throw new Error('Invalid message status');\n    }\n    this._status = status;\n  }\n\n  get timestamp() {\n    return this._timestamp;\n  }\n\n  set timestamp(value) {\n    this._timestamp = decodeDate(value);\n  }\n\n  /**\n   * 消息送达时间\n   * @type {?Date}\n   */\n  get deliveredAt() {\n    return this._deliveredAt;\n  }\n\n  set deliveredAt(value) {\n    this._deliveredAt = decodeDate(value);\n  }\n\n  /**\n   * 消息修改或撤回时间，可以通过比较其与消息的 timestamp 是否相等判断消息是否被修改过或撤回过。\n   * @type {Date}\n   * @since 3.5.0\n   */\n  get updatedAt() {\n    return this._updatedAt || this.timestamp;\n  }\n\n  set updatedAt(value) {\n    this._updatedAt = decodeDate(value);\n  }\n\n  /**\n   * 当前用户是否在该消息中被提及\n   * @type {Boolean}\n   * @readonly\n   * @since 4.0.0\n   */\n  get mentioned() {\n    return this._mentioned;\n  }\n\n  _updateMentioned(client) {\n    this._mentioned =\n      this.from !== client &&\n      (this.mentionedAll || this.mentionList.indexOf(client) > -1);\n  }\n\n  /**\n   * 获取提及用户列表\n   * @since 4.0.0\n   * @return {String[]} 提及用户的 id 列表\n   */\n  getMentionList() {\n    return this.mentionList;\n  }\n\n  /**\n   * 设置提及用户列表\n   * @since 4.0.0\n   * @param {String[]} clients 提及用户的 id 列表\n   * @return {this} self\n   */\n  setMentionList(clients) {\n    this.mentionList = ensureArray(clients);\n    return this;\n  }\n\n  /**\n   * 设置是否提及所有人\n   * @since 4.0.0\n   * @param {Boolean} [value=true]\n   * @return {this} self\n   */\n  mentionAll(value = true) {\n    this.mentionedAll = Boolean(value);\n    return this;\n  }\n\n  /**\n   * 判断给定的内容是否是有效的 Message，\n   * 该方法始终返回 true\n   * @private\n   * @returns {Boolean}\n   * @implements AVMessage.validate\n   */\n  static validate() {\n    return true;\n  }\n\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 如果子类提供了 message，返回该 message\n   * 如果没有提供，将 json 作为 content 实例化一个 Message\n   * @private\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {Message} message 子类提供的 message\n   * @return {Message}\n   * @implements AVMessage.parse\n   */\n  static parse(json, message) {\n    return message || new this(json);\n  }\n}\n","/* eslint-disable no-param-reassign */\nimport { getStaticProperty, isIE10 } from '../utils';\n\n// documented in ../index.js\nexport const messageType = type => {\n  if (typeof type !== 'number') {\n    throw new TypeError(`${type} is not a Number`);\n  }\n  return target => {\n    target.TYPE = type;\n    target.validate = json => json._lctype === type;\n    target.prototype._getType = () => ({ _lctype: type });\n  };\n};\n\n// documented in ../index.js\nexport const messageField = fields => {\n  if (typeof fields !== 'string') {\n    if (!Array.isArray(fields)) {\n      throw new TypeError(`${fields} is not an Array`);\n    } else if (fields.some(value => typeof value !== 'string')) {\n      throw new TypeError('fields contains non-string typed member');\n    }\n  }\n  return target => {\n    // IE10 Hack:\n    // static properties in IE10 will not be inherited from super\n    // search for parse method and assign it manually\n    let originalCustomFields = isIE10\n      ? getStaticProperty(target, '_customFields')\n      : target._customFields;\n    originalCustomFields = Array.isArray(originalCustomFields)\n      ? originalCustomFields\n      : [];\n    target._customFields = originalCustomFields.concat(fields);\n  };\n};\n\n// IE10 Hack:\n// static properties in IE10 will not be inherited from super\n// search for parse method and assign it manually\n\nexport const IE10Compatible = target => {\n  if (isIE10) {\n    target.parse = getStaticProperty(target, 'parse');\n  }\n};\n","import Message from './message';\nimport { messageField } from './helpers';\nimport { getStaticProperty, isIE10, compact } from '../utils';\n\n// jsdoc-ignore-start\n@messageField(['_lctext', '_lcattrs'])\n// jsdoc-ignore-end\n/**\n * 所有内置的富媒体消息均继承自本类\n * @extends Message\n */\nclass TypedMessage extends Message {\n  /**\n   * @type {Number}\n   * @readonly\n   */\n  get type() {\n    return this.constructor.TYPE;\n  }\n\n  /** @type {String} */\n  set text(text) {\n    return this.setText(text);\n  }\n\n  get text() {\n    return this.getText();\n  }\n\n  /** @type {Object} */\n  set attributes(attributes) {\n    return this.setAttributes(attributes);\n  }\n\n  get attributes() {\n    return this.getAttributes();\n  }\n\n  /**\n   * 在客户端需要以文本形式展示该消息时显示的文案，\n   * 如 <code>[红包] 新春快乐</code>。\n   * 默认值为消息的 text。\n   * @type {String}\n   * @readonly\n   */\n  get summary() {\n    return this.text;\n  }\n\n  /**\n   * @param {String} text\n   * @return {this} self\n   */\n  setText(text) {\n    this._lctext = text;\n    return this;\n  }\n\n  /**\n   * @return {String}\n   */\n  getText() {\n    return this._lctext;\n  }\n\n  /**\n   * @param {Object} attributes\n   * @return {this} self\n   */\n  setAttributes(attributes) {\n    this._lcattrs = attributes;\n    return this;\n  }\n\n  /**\n   * @return {Object}\n   */\n  getAttributes() {\n    return this._lcattrs;\n  }\n\n  _getCustomFields() {\n    const fields = Array.isArray(this.constructor._customFields)\n      ? this.constructor._customFields\n      : [];\n    return fields.reduce((result, field) => {\n      if (typeof field !== 'string') return result;\n      result[field] = this[field]; // eslint-disable-line no-param-reassign\n      return result;\n    }, {});\n  }\n\n  /* eslint-disable class-methods-use-this */\n  _getType() {\n    throw new Error('not implemented');\n  }\n  /* eslint-enable class-methods-use-this */\n\n  getPayload() {\n    return compact(\n      Object.assign(\n        {\n          _lctext: this.getText(),\n          _lcattrs: this.getAttributes(),\n        },\n        this._getCustomFields(),\n        this._getType()\n      )\n    );\n  }\n\n  toJSON() {\n    const { type, text, attributes, summary } = this;\n    return {\n      ...super._toJSON(),\n      type,\n      text,\n      attributes,\n      summary,\n    };\n  }\n\n  toFullJSON() {\n    return {\n      ...super.toFullJSON(),\n      data: this.getPayload(),\n    };\n  }\n\n  /**\n   * 解析处理消息内容\n   * <pre>\n   * 为给定的 message 设置 text 与 attributes 属性，返回该 message\n   * 如果子类没有提供 message，new this()\n   * @protected\n   * @param  {Object}  json    json 格式的消息内容\n   * @param  {TypedMessage} message 子类提供的 message\n   * @return {TypedMessage}\n   * @implements AVMessage.parse\n   */\n  static parse(json, message = new this()) {\n    message.content = json; // eslint-disable-line no-param-reassign\n    const customFields = isIE10\n      ? getStaticProperty(message.constructor, '_customFields')\n      : message.constructor._customFields;\n    let fields = Array.isArray(customFields) ? customFields : [];\n    fields = fields.reduce((result, field) => {\n      if (typeof field !== 'string') return result;\n      result[field] = json[field]; // eslint-disable-line no-param-reassign\n      return result;\n    }, {});\n    Object.assign(message, fields);\n    return super.parse(json, message);\n  }\n}\n\nexport default TypedMessage;\n","import TypedMessage from './typed-message';\nimport { messageType, IE10Compatible } from './helpers';\n\n// jsdoc-ignore-start\n@messageType(-127)\n@IE10Compatible\n// jsdoc-ignore-end\n/**\n * 已撤回类型消息，当消息被撤回时，SDK 会使用该类型的消息替代原始消息\n * @extends TypedMessage\n */\nclass RecalledMessage extends TypedMessage {\n  /**\n   * 在客户端需要以文本形式展示该消息时显示的文案，值为 <code>[该消息已撤回]</code>\n   * @type {String}\n   * @readonly\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get summary() {\n    return '[该消息已撤回]';\n  }\n}\nexport default RecalledMessage;\n","/* eslint class-methods-use-this: [\"error\", { \"exceptMethods\": [\"_addMembers\", \"_removeMembers\"] }] */\nimport EventEmitter from 'eventemitter3';\nimport d from 'debug';\nimport { decodeDate, getTime, internal } from '../utils';\nimport { applyDecorators } from '../plugin';\nimport {\n  GenericCommand,\n  ConvCommand,\n  DirectCommand,\n  LogsCommand,\n  PatchCommand,\n  PatchItem,\n  CommandType,\n  OpType,\n} from '../../proto/message';\nimport * as Event from '../events/im';\nimport { createError } from '../error';\nimport Message, { MessageStatus } from '../messages/message';\nimport RecalledMessage from '../messages/recalled-message';\n\nconst debug = d('LC:Conversation');\n\nconst serializeMessage = message => {\n  const content = message.getPayload();\n  let msg;\n  let binaryMsg;\n  if (content instanceof ArrayBuffer) {\n    binaryMsg = content;\n  } else if (typeof content !== 'string') {\n    msg = JSON.stringify(content);\n  } else {\n    msg = content;\n  }\n  return { msg, binaryMsg };\n};\n\nconst { NEW, OLD } = LogsCommand.QueryDirection;\n\n/**\n * 历史消息查询方向枚举\n * @enum {Number}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\nconst MessageQueryDirection = {\n  /** 从后向前 */\n  NEW_TO_OLD: OLD,\n  /** 从前向后 */\n  OLD_TO_NEW: NEW,\n};\nObject.freeze(MessageQueryDirection);\n\nexport { MessageQueryDirection };\n\nexport default class ConversationBase extends EventEmitter {\n  /**\n   * @extends EventEmitter\n   * @private\n   * @abstract\n   */\n  constructor(\n    {\n      id,\n      lastMessageAt,\n      lastMessage,\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount = 0,\n      members = [],\n      mentioned = false,\n      ...properties\n    },\n    client\n  ) {\n    super();\n    Object.assign(this, {\n      /**\n       * 对话 id，对应 _Conversation 表中的 objectId\n       * @memberof ConversationBase#\n       * @type {String}\n       */\n      id,\n      /**\n       * 最后一条消息时间\n       * @memberof ConversationBase#\n       * @type {?Date}\n       */\n      lastMessageAt,\n      /**\n       * 最后一条消息\n       * @memberof ConversationBase#\n       * @type {?Message}\n       */\n      lastMessage,\n      /**\n       * 参与该对话的用户列表\n       * @memberof ConversationBase#\n       * @type {String[]}\n       */\n      members,\n      // other properties provided by subclasses\n      ...properties,\n    });\n    this.members = Array.from(new Set(this.members));\n    Object.assign(internal(this), {\n      messagesWaitingForReceipt: {},\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount,\n      mentioned,\n    });\n    this._client = client;\n    if (debug.enabled) {\n      Object.values(Event).forEach(event =>\n        this.on(event, (...payload) =>\n          this._debug(`${event} event emitted. %o`, payload)\n        )\n      );\n    }\n    // onConversationCreate hook\n    applyDecorators(this._client._plugins.onConversationCreate, this);\n  }\n\n  /**\n   * 当前用户是否在该对话的未读消息中被提及\n   * @type {Boolean}\n   * @since 4.0.0\n   */\n  get unreadMessagesMentioned() {\n    return internal(this).unreadMessagesMentioned;\n  }\n\n  _setUnreadMessagesMentioned(value) {\n    internal(this).unreadMessagesMentioned = Boolean(value);\n  }\n\n  set unreadMessagesCount(value) {\n    if (value !== this.unreadMessagesCount) {\n      internal(this).unreadMessagesCount = value;\n      this._client.emit(Event.UNREAD_MESSAGES_COUNT_UPDATE, [this]);\n    }\n  }\n\n  /**\n   * 当前用户在该对话的未读消息数\n   * @type {Number}\n   */\n  get unreadMessagesCount() {\n    return internal(this).unreadMessagesCount;\n  }\n\n  set lastMessageAt(value) {\n    const time = decodeDate(value);\n    if (time <= this._lastMessageAt) return;\n    this._lastMessageAt = time;\n  }\n\n  get lastMessageAt() {\n    return this._lastMessageAt;\n  }\n\n  /**\n   * 最后消息送达时间，常用来实现消息的「已送达」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n   * @type {?Date}\n   * @since 3.4.0\n   */\n  get lastDeliveredAt() {\n    if (this.members.length !== 2) return null;\n    return internal(this).lastDeliveredAt;\n  }\n\n  _setLastDeliveredAt(value) {\n    const date = decodeDate(value);\n    if (!(date < internal(this).lastDeliveredAt)) {\n      internal(this).lastDeliveredAt = date;\n      /**\n       * 最后消息送达时间更新\n       * @event ConversationBase#LAST_DELIVERED_AT_UPDATE\n       * @since 3.4.0\n       */\n      this.emit(Event.LAST_DELIVERED_AT_UPDATE);\n    }\n  }\n\n  /**\n   * 最后消息被阅读时间，常用来实现发送消息的「已读」标记，可通过 {@link Conversation#fetchReceiptTimestamps} 获取或更新该属性\n   * @type {?Date}\n   * @since 3.4.0\n   */\n  get lastReadAt() {\n    if (this.members.length !== 2) return null;\n    return internal(this).lastReadAt;\n  }\n\n  _setLastReadAt(value) {\n    const date = decodeDate(value);\n    if (!(date < internal(this).lastReadAt)) {\n      internal(this).lastReadAt = date;\n      /**\n       * 最后消息被阅读时间更新\n       * @event ConversationBase#LAST_READ_AT_UPDATE\n       * @since 3.4.0\n       */\n      this.emit(Event.LAST_READ_AT_UPDATE);\n    }\n  }\n\n  /**\n   * 返回 JSON 格式的对话，与 toJSON 不同的是，该对象包含了完整的信息，可以通过 {@link IMClient#parseConversation} 反序列化。\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toFullJSON() {\n    const {\n      id,\n      members,\n      lastMessageAt,\n      lastDeliveredAt,\n      lastReadAt,\n      lastMessage,\n      unreadMessagesCount,\n    } = this;\n    return {\n      id,\n      members,\n      lastMessageAt: getTime(lastMessageAt),\n      lastDeliveredAt: getTime(lastDeliveredAt),\n      lastReadAt: getTime(lastReadAt),\n      lastMessage: lastMessage ? lastMessage.toFullJSON() : undefined,\n      unreadMessagesCount,\n    };\n  }\n\n  /**\n   * 返回 JSON 格式的对话\n   * @return {Object} 返回值是一个 plain Object\n   * @since 4.0.0\n   */\n  toJSON() {\n    const {\n      id,\n      members,\n      lastMessageAt,\n      lastDeliveredAt,\n      lastReadAt,\n      lastMessage,\n      unreadMessagesCount,\n      unreadMessagesMentioned,\n    } = this;\n    return {\n      id,\n      members,\n      lastMessageAt,\n      lastDeliveredAt,\n      lastReadAt,\n      lastMessage: lastMessage ? lastMessage.toJSON() : undefined,\n      unreadMessagesCount,\n      unreadMessagesMentioned,\n    };\n  }\n\n  _debug(...params) {\n    debug(...params, `[${this.id}]`);\n  }\n\n  _send(command, ...args) {\n    /* eslint-disable no-param-reassign */\n    if (command.cmd === null) {\n      command.cmd = 'conv';\n    }\n    if (command.cmd === 'conv' && command.convMessage === null) {\n      command.convMessage = new ConvCommand();\n    }\n    if (command.convMessage && command.convMessage.cid === null) {\n      command.convMessage.cid = this.id;\n    }\n    /* eslint-enable no-param-reassign */\n    return this._client._send(command, ...args);\n  }\n\n  /**\n   * 发送消息\n   * @param  {Message} message 消息，Message 及其子类的实例\n   * @param {Object} [options] since v3.3.0，发送选项\n   * @param {Boolean} [options.transient] since v3.3.1，是否作为暂态消息发送\n   * @param {Boolean} [options.receipt] 是否需要回执，仅在普通对话中有效\n   * @param {Boolean} [options.will] since v3.4.0，是否指定该消息作为「掉线消息」发送，\n   * 「掉线消息」会延迟到当前用户掉线后发送，常用来实现「下线通知」功能\n   * @param {MessagePriority} [options.priority] 消息优先级，仅在暂态对话中有效，\n   * see: {@link module:leancloud-realtime.MessagePriority MessagePriority}\n   * @param {Object} [options.pushData] 消息对应的离线推送内容，如果消息接收方不在线，会推送指定的内容。其结构说明参见: {@link https://url.leanapp.cn/pushData 推送消息内容}\n   * @return {Promise.<Message>} 发送的消息\n   */\n  async send(message, options) {\n    this._debug(message, 'send');\n    if (!(message instanceof Message)) {\n      throw new TypeError(`${message} is not a Message`);\n    }\n    const { transient, receipt, priority, pushData, will } = Object.assign(\n      {},\n      // support Message static property: sendOptions\n      message.constructor.sendOptions,\n      // support Message static property: getSendOptions\n      typeof message.constructor.getSendOptions === 'function'\n        ? message.constructor.getSendOptions(message)\n        : {},\n      options\n    );\n    if (receipt) {\n      if (this.transient) {\n        console.warn(\n          'receipt option is ignored as the conversation is transient.'\n        );\n      } else if (transient) {\n        console.warn(\n          'receipt option is ignored as the message is sent transiently.'\n        );\n      } else if (this.members.length > 2) {\n        console.warn(\n          'receipt option is recommended to be used in one-on-one conversation.'\n        ); // eslint-disable-line max-len\n      }\n    }\n    if (priority && !this.transient) {\n      console.warn(\n        'priority option is ignored as the conversation is not transient.'\n      );\n    }\n    Object.assign(message, {\n      cid: this.id,\n      from: this._client.id,\n    });\n    message._setStatus(MessageStatus.SENDING);\n    const { msg, binaryMsg } = serializeMessage(message);\n    const command = new GenericCommand({\n      cmd: 'direct',\n      directMessage: new DirectCommand({\n        msg,\n        binaryMsg,\n        cid: this.id,\n        r: receipt,\n        transient,\n        dt: message.id,\n        pushData: JSON.stringify(pushData),\n        will,\n        mentionPids: message.mentionList,\n        mentionAll: message.mentionedAll,\n      }),\n      priority,\n    });\n    try {\n      const resCommand = await this._send(command);\n      const {\n        ackMessage: { uid, t, code, reason, appCode },\n      } = resCommand;\n      if (code !== null) {\n        throw createError({\n          code,\n          reason,\n          appCode,\n        });\n      }\n      Object.assign(message, {\n        id: uid,\n        timestamp: t,\n      });\n      if (!transient) {\n        this.lastMessage = message;\n        this.lastMessageAt = message.timestamp;\n      }\n      message._setStatus(MessageStatus.SENT);\n      if (receipt) {\n        internal(this).messagesWaitingForReceipt[message.id] = message;\n      }\n      return message;\n    } catch (error) {\n      message._setStatus(MessageStatus.FAILED);\n      throw error;\n    }\n  }\n\n  async _update(message, newMessage, recall) {\n    this._debug('patch %O %O %O', message, newMessage, recall);\n    if (message instanceof Message) {\n      if (message.from !== this._client.id) {\n        throw new Error('Updating message from others is not allowed');\n      }\n      if (\n        message.status !== MessageStatus.SENT &&\n        message.status !== MessageStatus.DELIVERED\n      ) {\n        throw new Error('Message is not sent');\n      }\n    } else if (!(message.id && message.timestamp)) {\n      throw new TypeError(`${message} is not a Message`);\n    }\n    let msg;\n    let binaryMsg;\n    if (!recall) {\n      const content = serializeMessage(newMessage);\n      ({ msg, binaryMsg } = content);\n    }\n    await this._send(\n      new GenericCommand({\n        cmd: CommandType.patch,\n        op: OpType.modify,\n        patchMessage: new PatchCommand({\n          patches: [\n            new PatchItem({\n              cid: this.id,\n              mid: message.id,\n              timestamp: Number(message.timestamp),\n              recall,\n              data: msg,\n              binaryMsg,\n              mentionPids: newMessage.mentionList,\n              mentionAll: newMessage.mentionedAll,\n            }),\n          ],\n          lastPatchTime: this._client._lastPatchTime,\n        }),\n      })\n    );\n    const { id, cid, timestamp, from, _status } = message;\n    Object.assign(newMessage, {\n      id,\n      cid,\n      timestamp,\n      from,\n      _status,\n    });\n    if (this.lastMessage.id === newMessage.id) {\n      this.lastMessage = newMessage;\n    }\n    return newMessage;\n  }\n\n  /**\n   * 获取对话人数，或暂态对话的在线人数\n   * @return {Promise.<Number>}\n   */\n  async count() {\n    this._debug('count');\n    const resCommand = await this._send(\n      new GenericCommand({\n        op: 'count',\n      })\n    );\n    return resCommand.convMessage.count;\n  }\n\n  /**\n   * 应用增加成员的操作，产生副作用\n   * @param {string[]} members\n   * @abstract\n   * @private\n   */\n  _addMembers() {}\n\n  /**\n   * 应用减少成员的操作，产生副作用\n   * @param {string[]} members\n   * @abstract\n   * @private\n   */\n  _removeMembers() {}\n\n  /**\n   * 修改已发送的消息\n   * @param {AVMessage} message 要修改的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @param {AVMessage} newMessage 新的消息\n   * @return {Promise.<AVMessage>} 更新后的消息\n   */\n  async update(message, newMessage) {\n    if (!(newMessage instanceof Message)) {\n      throw new TypeError(`${newMessage} is not a Message`);\n    }\n    return this._update(message, newMessage, false);\n  }\n\n  /**\n   * 撤回已发送的消息\n   * @param {AVMessage} message 要撤回的消息，该消息必须是由当前用户发送的。也可以提供一个包含消息 {id, timestamp} 的对象\n   * @return {Promise.<RecalledMessage>} 一条已撤回的消息\n   */\n  async recall(message) {\n    return this._update(message, new RecalledMessage(), true);\n  }\n\n  /**\n   * 查询消息记录\n   * 如果仅需实现消息向前记录翻页查询需求，建议使用 {@link Conversation#createMessagesIterator}。\n   * 不论何种方向，获得的消息都是按照时间升序排列的。\n   * startClosed 与 endClosed 用于指定查询区间的开闭。\n   *\n   * @param  {Object} [options]\n   * @param  {Number} [options.limit] 限制查询结果的数量，目前服务端默认为 20\n   * @param  {Number}   [options.type] 指定查询的富媒体消息类型，不指定则查询所有消息。\n   * @param  {MessageQueryDirection} [options.direction] 查询的方向。\n   * 在不指定的情况下如果 startTime 大于 endTime，则为从新到旧查询，可以实现加载聊天记录等场景。\n   * 如果 startTime 小于 endTime，则为从旧到新查询，可以实现弹幕等场景。\n   * @param  {Date}   [options.startTime] 从该时间开始查询，不传则从当前时间开始查询\n   * @param  {String} [options.startMessageId] 从该消息之前开始查询，需要与 startTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.startClosed] 指定查询范围是否包括开始的时间点，默认不包括\n   * @param  {Date}   [options.endTime] 查询到该时间为止，不传则查询最早消息为止\n   * @param  {String} [options.endMessageId] 查询到该消息为止，需要与 endTime 同时使用，为防止某时刻有重复消息\n   * @param  {Boolean}[options.endClosed] 指定查询范围是否包括结束的时间点，默认不包括\n   *\n   * @param  {Date}   [options.beforeTime] DEPRECATED: 使用 startTime 代替。限制查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] DEPRECATED: 使用 startMessageId 代替。\n   * 限制查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Date}   [options.afterTime] DEPRECATED: 使用 endTime 代替。限制查询结果为大于该时间之前的消息\n   * @param  {String} [options.afterMessageId] DEPRECATED: 使用 endMessageId 代替。\n   * 限制查询结果为该消息之后的消息，需要与 afterTime 同时使用，为防止某时刻有重复消息\n   * @return {Promise.<Message[]>} 消息列表\n   */\n  async queryMessages(options = {}) {\n    this._debug('query messages %O', options);\n    const {\n      beforeTime,\n      beforeMessageId,\n      afterTime,\n      afterMessageId,\n      limit,\n      direction,\n      type,\n      startTime,\n      startMessageId,\n      startClosed,\n      endTime,\n      endMessageId,\n      endClosed,\n    } = options;\n    if (beforeMessageId || beforeTime || afterMessageId || afterTime) {\n      console.warn(\n        'DEPRECATION: queryMessages options beforeTime, beforeMessageId, afterTime and afterMessageId are deprecated in favor of startTime, startMessageId, endTime and endMessageId.'\n      );\n      return this.queryMessages({\n        startTime: beforeTime,\n        startMessageId: beforeMessageId,\n        endTime: afterTime,\n        endMessageId: afterMessageId,\n        limit,\n      });\n    }\n    if (startMessageId && !startTime) {\n      throw new Error(\n        'query option startMessageId must be used with option startTime'\n      );\n    }\n    if (endMessageId && !endTime) {\n      throw new Error(\n        'query option endMessageId must be used with option endTime'\n      );\n    }\n    const conditions = {\n      t: startTime,\n      mid: startMessageId,\n      tIncluded: startClosed,\n      tt: endTime,\n      tmid: endMessageId,\n      ttIncluded: endClosed,\n      l: limit,\n      lctype: type,\n    };\n    if (conditions.t instanceof Date) {\n      conditions.t = conditions.t.getTime();\n    }\n    if (conditions.tt instanceof Date) {\n      conditions.tt = conditions.tt.getTime();\n    }\n    if (direction !== undefined) {\n      conditions.direction = direction;\n    } else if (conditions.tt > conditions.t) {\n      conditions.direction = MessageQueryDirection.OLD_TO_NEW;\n    }\n    const resCommand = await this._send(\n      new GenericCommand({\n        cmd: 'logs',\n        logsMessage: new LogsCommand(\n          Object.assign(conditions, {\n            cid: this.id,\n          })\n        ),\n      })\n    );\n    return Promise.all(\n      resCommand.logsMessage.logs.map(\n        async ({\n          msgId,\n          timestamp,\n          patchTimestamp,\n          from,\n          ackAt,\n          readAt,\n          data,\n          mentionAll,\n          mentionPids,\n          bin,\n        }) => {\n          const messageData = {\n            data,\n            bin,\n            id: msgId,\n            cid: this.id,\n            timestamp,\n            from,\n            deliveredAt: ackAt,\n            updatedAt: patchTimestamp,\n            mentionList: mentionPids,\n            mentionedAll: mentionAll,\n          };\n          const message = await this._client.parseMessage(messageData);\n          let status = MessageStatus.SENT;\n          if (this.members.length === 2) {\n            if (ackAt) status = MessageStatus.DELIVERED;\n            if (ackAt) this._setLastDeliveredAt(ackAt);\n            if (readAt) this._setLastReadAt(readAt);\n          }\n          message._setStatus(status);\n          return message;\n        }\n      )\n    );\n  }\n\n  /**\n   * 获取消息翻页迭代器\n   * @param  {Object} [options]\n   * @param  {Date}   [options.beforeTime] 限制起始查询结果为小于该时间之前的消息，不传则为当前时间\n   * @param  {String} [options.beforeMessageId] 限制起始查询结果为该消息之前的消息，需要与 beforeTime 同时使用，为防止某时刻有重复消息\n   * @param  {Number} [options.limit] 限制每页查询结果的数量，目前服务端默认为 20\n   * @return {AsyncIterater.<Promise.<IteratorResult<Message[]>>>} [AsyncIterator]{@link https://github.com/tc39/proposal-async-iteration}，调用其 next 方法返回获取下一页消息的 Promise\n   * @example\n   * var messageIterator = conversation.createMessagesIterator({ limit: 10 });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message1, ..., message10],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // result: {\n   *   //   value: [message11, ..., message20],\n   *   //   done: false,\n   *   // }\n   * });\n   * messageIterator.next().then(function(result) {\n   *   // No more messages\n   *   // result: { value: [], done: true }\n   * });\n   */\n  createMessagesIterator({ beforeTime, beforeMessageId, limit } = {}) {\n    let promise;\n    return {\n      next: () => {\n        if (promise === undefined) {\n          // first call\n          promise = this.queryMessages({\n            limit,\n            startTime: beforeTime,\n            startMessageId: beforeMessageId,\n          });\n        } else {\n          promise = promise.then(prevMessages => {\n            if (prevMessages.length === 0 || prevMessages.length < limit) {\n              // no more messages\n              return [];\n            }\n            return this.queryMessages({\n              startTime: prevMessages[0].timestamp,\n              startMessageId: prevMessages[0].id,\n              limit,\n            });\n          });\n        }\n        return promise.then(value => ({\n          value: Array.from(value),\n          done: value.length === 0 || value.length < limit,\n        }));\n      },\n    };\n  }\n\n  /**\n   * 将该会话标记为已读\n   * @return {Promise.<this>} self\n   */\n  async read() {\n    this.unreadMessagesCount = 0;\n    this._setUnreadMessagesMentioned(false);\n    // 跳过暂态会话\n    if (this.transient) return this;\n    const client = this._client;\n    if (!internal(client).readConversationsBuffer) {\n      internal(client).readConversationsBuffer = new Set();\n    }\n    internal(client).readConversationsBuffer.add(this);\n    client._doSendRead();\n    return this;\n  }\n\n  _handleReceipt({ messageId, timestamp, read }) {\n    if (read) {\n      this._setLastReadAt(timestamp);\n    } else {\n      this._setLastDeliveredAt(timestamp);\n    }\n    const { messagesWaitingForReceipt } = internal(this);\n    const message = messagesWaitingForReceipt[messageId];\n    if (!message) return;\n    message._setStatus(MessageStatus.DELIVERED);\n    message.deliveredAt = timestamp;\n    delete messagesWaitingForReceipt[messageId];\n  }\n\n  /**\n   * 更新对话的最新回执时间戳（lastDeliveredAt、lastReadAt）\n   * @since 3.4.0\n   * @return {Promise.<this>} this\n   */\n  async fetchReceiptTimestamps() {\n    const {\n      convMessage: { maxReadTimestamp, maxAckTimestamp },\n    } = await this._send(\n      new GenericCommand({\n        op: 'max_read',\n      })\n    );\n    this._setLastDeliveredAt(maxAckTimestamp);\n    this._setLastReadAt(maxReadTimestamp);\n    return this;\n  }\n\n  _fetchAllReceiptTimestamps() {\n    const convMessage = new ConvCommand({\n      queryAllMembers: true,\n    });\n    return this._send(\n      new GenericCommand({\n        op: 'max_read',\n        convMessage,\n      })\n    ).then(({ convMessage: { maxReadTuples } }) =>\n      maxReadTuples\n        .filter(\n          maxReadTuple =>\n            maxReadTuple.maxAckTimestamp || maxReadTuple.maxReadTimestamp\n        )\n        .map(({ pid, maxAckTimestamp, maxReadTimestamp }) => ({\n          pid,\n          lastDeliveredAt: decodeDate(maxAckTimestamp),\n          lastReadAt: decodeDate(maxReadTimestamp),\n        }))\n    );\n  }\n}\n","import d from 'debug';\nimport { tap } from './utils';\n\nconst debug = d('LC:SignatureFactoryRunner');\n\nfunction _validateSignature(signatureResult = {}) {\n  const { signature, timestamp, nonce } = signatureResult;\n  if (\n    typeof signature !== 'string' ||\n    typeof timestamp !== 'number' ||\n    typeof nonce !== 'string'\n  ) {\n    throw new Error('malformed signature');\n  }\n  return {\n    signature,\n    timestamp,\n    nonce,\n  };\n}\n\nexport default (signatureFactory, params) =>\n  Promise.resolve()\n    .then(() => {\n      debug('call signatureFactory with %O', params);\n      return signatureFactory(...params);\n    })\n    .then(\n      tap(signatureResult => debug('sign result %O', signatureResult)),\n      error => {\n        // eslint-disable-next-line no-param-reassign\n        error.message = `sign error: ${error.message}`;\n        debug(error);\n        throw error;\n      }\n    )\n    .then(_validateSignature);\n","import isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash/cloneDeep';\nimport ConversationBase from './conversation-base';\nimport {\n  decodeDate,\n  getTime,\n  encode,\n  keyRemap,\n  union,\n  difference,\n  internal,\n  setValue,\n  ensureArray,\n} from '../utils';\nimport {\n  GenericCommand,\n  ConvCommand,\n  JsonObjectMessage,\n  BlacklistCommand,\n  OpType,\n} from '../../proto/message';\nimport runSignatureFactory from '../signature-factory-runner';\nimport { createError } from '../error';\n\n/**\n * 部分失败异常\n * @typedef OperationFailureError\n * @type {Error}\n * @property {string} message 异常信息\n * @property {string[]} clientIds 因为该原因失败的 client id 列表\n * @property {number} [code] 错误码\n * @property {string} [detail] 详细信息\n */\n\n/**\n * 部分成功的结果\n * @typedef PartiallySuccess\n * @type {Object}\n * @property {string[]} successfulClientIds 成功的 client id 列表\n * @property {OperationFailureError[]} failures 失败的异常列表\n */\n\n/**\n * 分页查询结果\n * @typedef PagedResults\n * @type {Object}\n * @property {T[]} results 查询结果\n * @property {string} [next] 存在表示还有更多结果，在下次查询中带上可实现翻页。\n */\n\nconst createPartiallySuccess = ({ allowedPids, failedPids }) => ({\n  successfulClientIds: allowedPids,\n  failures: failedPids.map(({ pids, ...error }) =>\n    Object.assign(createError(error), { clientIds: pids })\n  ),\n});\n\n/**\n * @extends ConversationBase\n * @private\n * @abstract\n */\nclass PersistentConversation extends ConversationBase {\n  constructor(\n    data,\n    {\n      creator,\n      createdAt,\n      updatedAt,\n      transient = false,\n      system = false,\n      muted = false,\n      mutedMembers = [],\n      ...attributes\n    },\n    client\n  ) {\n    super(\n      {\n        ...data,\n        /**\n         * 对话创建者\n         * @memberof PersistentConversation#\n         * @type {String}\n         */\n        creator,\n        /**\n         * 对话创建时间\n         * @memberof PersistentConversation#\n         * @type {Date}\n         */\n        createdAt,\n        /**\n         * 对话更新时间\n         * @memberof PersistentConversation#\n         * @type {Date}\n         */\n        updatedAt,\n        /**\n         * 对该对话设置了静音的用户列表\n         * @memberof PersistentConversation#\n         * @type {?String[]}\n         */\n        mutedMembers,\n        /**\n         * 暂态对话标记\n         * @memberof PersistentConversation#\n         * @type {Boolean}\n         */\n        transient,\n        /**\n         * 系统对话标记\n         * @memberof PersistentConversation#\n         * @type {Boolean}\n         * @since 3.3.0\n         */\n        system,\n        /**\n         * 当前用户静音该对话标记\n         * @memberof PersistentConversation#\n         * @type {Boolean}\n         */\n        muted,\n        _attributes: attributes,\n      },\n      client\n    );\n    this._reset();\n  }\n\n  set createdAt(value) {\n    this._createdAt = decodeDate(value);\n  }\n\n  get createdAt() {\n    return this._createdAt;\n  }\n\n  set updatedAt(value) {\n    this._updatedAt = decodeDate(value);\n  }\n\n  get updatedAt() {\n    return this._updatedAt;\n  }\n\n  /**\n   * 对话名字，对应 _Conversation 表中的 name\n   * @type {String}\n   */\n  get name() {\n    return this.get('name');\n  }\n\n  set name(value) {\n    this.set('name', value);\n  }\n\n  /**\n   * 获取对话的自定义属性\n   * @since 3.2.0\n   * @param  {String} key key 属性的键名，'x' 对应 Conversation 表中的 x 列\n   * @return {Any} 属性的值\n   */\n  get(key) {\n    return internal(this).currentAttributes[key];\n  }\n\n  /**\n   * 设置对话的自定义属性\n   * @since 3.2.0\n   * @param {String} key 属性的键名，'x' 对应 Conversation 表中的 x 列，支持使用 'x.y.z' 来修改对象的部分字段。\n   * @param {Any} value 属性的值\n   * @return {this} self\n   * @example\n   *\n   * // 设置对话的 color 属性\n   * conversation.set('color', {\n   *   text: '#000',\n   *   background: '#DDD',\n   * });\n   * // 设置对话的 color.text 属性\n   * conversation.set('color.text', '#333');\n   */\n  set(key, value) {\n    this._debug(`set [${key}]: ${value}`);\n    const { pendingAttributes } = internal(this);\n    const pendingKeys = Object.keys(pendingAttributes);\n    // suppose pendingAttributes = { 'a.b': {} }\n    // set 'a' or 'a.b': delete 'a.b'\n    const re = new RegExp(`^${key}`);\n    const childKeys = pendingKeys.filter(re.test.bind(re));\n    childKeys.forEach(k => {\n      delete pendingAttributes[k];\n    });\n    if (childKeys.length) {\n      pendingAttributes[key] = value;\n    } else {\n      // set 'a.c': nothing to do\n      // set 'a.b.c.d': assign c: { d: {} } to 'a.b'\n      // CAUTION: non-standard API, provided by core-js\n      const parentKey = Array.find(pendingKeys, k => key.indexOf(k) === 0); // 'a.b'\n      if (parentKey) {\n        setValue(\n          pendingAttributes[parentKey],\n          key.slice(parentKey.length + 1),\n          value\n        );\n      } else {\n        pendingAttributes[key] = value;\n      }\n    }\n    this._buildCurrentAttributes();\n    return this;\n  }\n\n  _buildCurrentAttributes() {\n    const { pendingAttributes } = internal(this);\n    internal(this).currentAttributes = Object.keys(pendingAttributes).reduce(\n      (target, k) => setValue(target, k, pendingAttributes[k]),\n      cloneDeep(this._attributes)\n    );\n  }\n\n  _updateServerAttributes(attributes) {\n    Object.keys(attributes).forEach(key =>\n      setValue(this._attributes, key, attributes[key])\n    );\n    this._buildCurrentAttributes();\n  }\n\n  _reset() {\n    Object.assign(internal(this), {\n      pendingAttributes: {},\n      currentAttributes: this._attributes,\n    });\n  }\n\n  /**\n   * 保存当前对话的属性至服务器\n   * @return {Promise.<this>} self\n   */\n  async save() {\n    this._debug('save');\n    const attr = internal(this).pendingAttributes;\n    if (isEmpty(attr)) {\n      this._debug('nothing touched, resolve with self');\n      return this;\n    }\n    this._debug('attr: %O', attr);\n    const convMessage = new ConvCommand({\n      attr: new JsonObjectMessage({\n        data: JSON.stringify(encode(attr)),\n      }),\n    });\n    const resCommand = await this._send(\n      new GenericCommand({\n        op: 'update',\n        convMessage,\n      })\n    );\n    this.updatedAt = resCommand.convMessage.udate;\n    this._attributes = internal(this).currentAttributes;\n    internal(this).pendingAttributes = {};\n    return this;\n  }\n\n  /**\n   * 从服务器更新对话的属性\n   * @return {Promise.<this>} self\n   */\n  async fetch() {\n    const query = this._client.getQuery().equalTo('objectId', this.id);\n    await query.find();\n    return this;\n  }\n\n  /**\n   * 静音，客户端拒绝收到服务器端的离线推送通知\n   * @return {Promise.<this>} self\n   */\n  async mute() {\n    this._debug('mute');\n    await this._send(\n      new GenericCommand({\n        op: 'mute',\n      })\n    );\n    if (!this.transient) {\n      this.muted = true;\n      this.mutedMembers = union(this.mutedMembers, [this._client.id]);\n    }\n    return this;\n  }\n\n  /**\n   * 取消静音\n   * @return {Promise.<this>} self\n   */\n  async unmute() {\n    this._debug('unmute');\n    await this._send(\n      new GenericCommand({\n        op: 'unmute',\n      })\n    );\n    if (!this.transient) {\n      this.muted = false;\n      this.mutedMembers = difference(this.mutedMembers, [this._client.id]);\n    }\n    return this;\n  }\n\n  async _appendConversationSignature(command, action, clientIds) {\n    if (this._client.options.conversationSignatureFactory) {\n      const params = [this.id, this._client.id, clientIds.sort(), action];\n      const signatureResult = await runSignatureFactory(\n        this._client.options.conversationSignatureFactory,\n        params\n      );\n      Object.assign(\n        command.convMessage,\n        keyRemap(\n          {\n            signature: 's',\n            timestamp: 't',\n            nonce: 'n',\n          },\n          signatureResult\n        )\n      );\n    }\n  }\n\n  async _appendBlacklistSignature(command, action, clientIds) {\n    if (this._client.options.blacklistSignatureFactory) {\n      const params = [this._client.id, this.id, clientIds.sort(), action];\n      const signatureResult = await runSignatureFactory(\n        this._client.options.blacklistSignatureFactory,\n        params\n      );\n      Object.assign(\n        command.blacklistMessage,\n        keyRemap(\n          {\n            signature: 's',\n            timestamp: 't',\n            nonce: 'n',\n          },\n          signatureResult\n        )\n      );\n    }\n  }\n\n  /**\n   * 增加成员\n   * @param {String|String[]} clientIds 新增成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async add(clientIds) {\n    this._debug('add', clientIds);\n    if (typeof clientIds === 'string') {\n      clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n    }\n    const command = new GenericCommand({\n      op: 'add',\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    await this._appendConversationSignature(command, 'add', clientIds);\n    const {\n      convMessage,\n      convMessage: { allowedPids },\n    } = await this._send(command);\n    this._addMembers(allowedPids);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 剔除成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async remove(clientIds) {\n    this._debug('remove', clientIds);\n    if (typeof clientIds === 'string') {\n      clientIds = [clientIds]; // eslint-disable-line no-param-reassign\n    }\n    const command = new GenericCommand({\n      op: 'remove',\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    await this._appendConversationSignature(command, 'remove', clientIds);\n    const {\n      convMessage,\n      convMessage: { allowedPids },\n    } = await this._send(command);\n    this._removeMembers(allowedPids);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * （当前用户）加入该对话\n   * @return {Promise.<this>} self\n   */\n  async join() {\n    this._debug('join');\n    return this.add(this._client.id).then(({ failures }) => {\n      if (failures[0]) throw failures[0];\n      return this;\n    });\n  }\n\n  /**\n   * （当前用户）退出该对话\n   * @return {Promise.<this>} self\n   */\n  async quit() {\n    this._debug('quit');\n    return this.remove(this._client.id).then(({ failures }) => {\n      if (failures[0]) throw failures[0];\n      return this;\n    });\n  }\n\n  /**\n   * 在该对话中禁言成员\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async muteMembers(clientIds) {\n    this._debug('mute', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      op: OpType.add_shutup,\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    const { convMessage } = await this._send(command);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 在该对话中解除成员禁言\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async unmuteMembers(clientIds) {\n    this._debug('unmute', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      op: OpType.remove_shutup,\n      convMessage: new ConvCommand({\n        m: clientIds,\n      }),\n    });\n    const { convMessage } = await this._send(command);\n    return createPartiallySuccess(convMessage);\n  }\n\n  /**\n   * 查询该对话禁言成员列表\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页。\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  async queryMutedMembers({ limit, next } = {}) {\n    this._debug('query muted: limit %O, next: %O', limit, next);\n    const command = new GenericCommand({\n      op: OpType.query_shutup,\n      convMessage: new ConvCommand({\n        limit,\n        next,\n      }),\n    });\n    const {\n      convMessage: { m, next: newNext },\n    } = await this._send(command);\n    return {\n      results: m,\n      next: newNext,\n    };\n  }\n\n  /**\n   * 将用户加入该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async blockMembers(clientIds) {\n    this._debug('block', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.block,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        toPids: clientIds,\n      }),\n    });\n    await this._appendBlacklistSignature(\n      command,\n      'conversation-block-clients',\n      clientIds\n    );\n    const { blacklistMessage } = await this._send(command);\n    return createPartiallySuccess(blacklistMessage);\n  }\n\n  /**\n   * 将用户移出该对话黑名单\n   * @param {String|String[]} clientIds 成员 client id\n   * @return {Promise.<PartiallySuccess>} 部分成功结果，包含了成功的 id 列表、失败原因与对应的 id 列表\n   */\n  async unblockMembers(clientIds) {\n    this._debug('unblock', clientIds);\n    clientIds = ensureArray(clientIds); // eslint-disable-line no-param-reassign\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.unblock,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        toPids: clientIds,\n      }),\n    });\n    await this._appendBlacklistSignature(\n      command,\n      'conversation-unblock-clients',\n      clientIds\n    );\n    const { blacklistMessage } = await this._send(command);\n    return createPartiallySuccess(blacklistMessage);\n  }\n\n  /**\n   * 查询该对话黑名单\n   * @param {Object} [options]\n   * @param {Number} [options.limit] 返回的成员数量，服务器默认值 10\n   * @param {String} [options.next] 从指定 next 开始查询，与 limit 一起使用可以完成翻页\n   * @return {PagedResults.<string>} 查询结果。其中的 cureser 存在表示还有更多结果。\n   */\n  async queryBlockedMembers({ limit, next } = {}) {\n    this._debug('query blocked: limit %O, next: %O', limit, next);\n    const command = new GenericCommand({\n      cmd: 'blacklist',\n      op: OpType.query,\n      blacklistMessage: new BlacklistCommand({\n        srcCid: this.id,\n        limit,\n        next,\n      }),\n    });\n    const {\n      blacklistMessage: { blockedPids, next: newNext },\n    } = await this._send(command);\n    return {\n      results: blockedPids,\n      next: newNext,\n    };\n  }\n\n  toFullJSON() {\n    const {\n      creator,\n      system,\n      transient,\n      createdAt,\n      updatedAt,\n      _attributes,\n    } = this;\n    return {\n      ...super.toFullJSON(),\n      creator,\n      system,\n      transient,\n      createdAt: getTime(createdAt),\n      updatedAt: getTime(updatedAt),\n      ..._attributes,\n    };\n  }\n\n  toJSON() {\n    const {\n      creator,\n      system,\n      transient,\n      muted,\n      mutedMembers,\n      createdAt,\n      updatedAt,\n      _attributes,\n    } = this;\n    return {\n      ...super.toJSON(),\n      creator,\n      system,\n      transient,\n      muted,\n      mutedMembers,\n      createdAt,\n      updatedAt,\n      ..._attributes,\n    };\n  }\n}\n\nexport default PersistentConversation;\n","import { internal } from './utils';\n\n/**\n * 对话成员角色枚举\n * @enum {String}\n * @since 4.0.0\n * @memberof module:leancloud-realtime\n */\nconst ConversationMemberRole = {\n  /** 所有者 */\n  OWNER: 'Owner',\n  /** 管理员 */\n  MANAGER: 'Manager',\n  /** 成员 */\n  MEMBER: 'Member',\n};\nObject.freeze(ConversationMemberRole);\nexport { ConversationMemberRole };\n\nexport default class ConversationMemberInfo {\n  /**\n   * 对话成员属性，保存了成员与某个对话相关的属性，对应 _ConversationMemberInfo 表\n   * @since 4.0.0\n   */\n  constructor({ conversation, memberId, role }) {\n    if (!conversation) throw new Error('conversation requried');\n    if (!memberId) throw new Error('memberId requried');\n    Object.assign(internal(this), {\n      conversation,\n      memberId,\n      role,\n    });\n  }\n\n  /**\n   * 对话 Id\n   * @type {String}\n   * @readonly\n   */\n  get conversationId() {\n    return internal(this).conversation.id;\n  }\n\n  /**\n   * 成员 Id\n   * @type {String}\n   * @readonly\n   */\n  get memberId() {\n    return internal(this).memberId;\n  }\n\n  /**\n   * 角色\n   * @type {module:leancloud-realtime.ConversationMemberRole | String}\n   * @readonly\n   */\n  get role() {\n    if (this.isOwner) return ConversationMemberRole.OWNER;\n    return internal(this).role;\n  }\n\n  /**\n   * 是否是管理员\n   * @type {Boolean}\n   * @readonly\n   */\n  get isOwner() {\n    return this.memberId === internal(this).conversation.creator;\n  }\n\n  toJSON() {\n    const { conversationId, memberId, role, isOwner } = this;\n    return {\n      conversationId,\n      memberId,\n      role,\n      isOwner,\n    };\n  }\n}\n","import PersistentConversation from './persistent-conversation';\nimport ConversationMemberInfo, {\n  ConversationMemberRole,\n} from '../conversation-member-info';\nimport { internal, union, difference } from '../utils';\nimport {\n  GenericCommand,\n  ConvCommand,\n  ConvMemberInfo,\n  OpType,\n} from '../../proto/message';\nimport { createError, ErrorCode } from '../error';\n\n/**\n * 普通对话\n *\n * 无法直接实例化，请使用 {@link IMClient#createConversation} 创建新的普通对话。\n * @extends PersistentConversation\n * @public\n */\nclass Conversation extends PersistentConversation {\n  _addMembers(members) {\n    super._addMembers(members);\n    this.members = union(this.members, members);\n    const { memberInfoMap } = internal(this);\n    if (!memberInfoMap) return;\n    members.forEach(memberId => {\n      memberInfoMap[memberId] =\n        memberInfoMap[memberId] ||\n        new ConversationMemberInfo({\n          conversation: this,\n          memberId,\n          role: ConversationMemberRole.MEMBER,\n        });\n    });\n  }\n\n  _removeMembers(members) {\n    super._removeMembers(members);\n    this.members = difference(this.members, members);\n    const { memberInfoMap } = internal(this);\n    if (!memberInfoMap) return;\n    members.forEach(memberId => {\n      delete memberInfoMap[memberId];\n    });\n  }\n\n  async _fetchAllMemberInfo() {\n    const response = await this._client._requestWithSessionToken({\n      method: 'GET',\n      path: '/classes/_ConversationMemberInfo',\n      query: {\n        where: { cid: this.id },\n      },\n    });\n    const memberInfos = response.results.map(\n      info =>\n        new ConversationMemberInfo({\n          conversation: this,\n          memberId: info.clientId,\n          role: info.role,\n        })\n    );\n    const memberInfoMap = {};\n    memberInfos.forEach(memberInfo => {\n      memberInfoMap[memberInfo.memberId] = memberInfo;\n    });\n    this.members.forEach(memberId => {\n      memberInfoMap[memberId] =\n        memberInfoMap[memberId] ||\n        new ConversationMemberInfo({\n          conversation: this,\n          memberId,\n          role: ConversationMemberRole.MEMBER,\n        });\n    });\n    internal(this).memberInfoMap = memberInfoMap;\n    return memberInfoMap;\n  }\n\n  /**\n   * 获取所有成员的对话属性\n   * @since 4.0.0\n   * @return {Promise.<ConversationMemberInfo[]>} 所有成员的对话属性列表\n   */\n  async getAllMemberInfo({ noCache = false } = {}) {\n    let { memberInfoMap } = internal(this);\n    if (!memberInfoMap || noCache) {\n      memberInfoMap = await this._fetchAllMemberInfo();\n    }\n    return this.members.map(memberId => memberInfoMap[memberId]);\n  }\n\n  /**\n   * 获取指定成员的对话属性\n   * @since 4.0.0\n   * @param {String} memberId 成员 Id\n   * @return {Promise.<ConversationMemberInfo>} 指定成员的对话属性\n   */\n  async getMemberInfo(memberId) {\n    if (this.members.indexOf(memberId) === -1)\n      throw new Error(\n        `${memberId} is not the mumber of conversation[${this.id}]`\n      );\n    const { memberInfoMap } = internal(this);\n    if (!(memberInfoMap && memberInfoMap[memberId]))\n      await this.getAllMemberInfo();\n    return internal(this).memberInfoMap[memberId];\n  }\n\n  /**\n   * 更新指定用户的角色\n   * @since 4.0.0\n   * @param {String} memberId 成员 Id\n   * @param {module:leancloud-realtime.ConversationMemberRole | String} role 角色\n   * @return {Promise.<this>} self\n   */\n  async updateMemberRole(memberId, role) {\n    this._debug('update member role');\n    if (role === ConversationMemberRole.OWNER)\n      throw createError({\n        code: ErrorCode.OWNER_PROMOTION_NOT_ALLOWED,\n      });\n    await this._send(\n      new GenericCommand({\n        op: OpType.member_info_update,\n        convMessage: new ConvCommand({\n          targetClientId: memberId,\n          info: new ConvMemberInfo({\n            pid: memberId,\n            role,\n          }),\n        }),\n      })\n    );\n    const { memberInfos } = internal(this);\n    if (memberInfos && memberInfos[memberId]) {\n      internal(memberInfos[memberId]).role = role;\n    }\n    return this;\n  }\n}\n\nexport default Conversation;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 聊天室。\n *\n * 无法直接实例化，请使用 {@link IMClient#createChatRoom} 创建新的聊天室。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\nclass ChatRoom extends PersistentConversation {}\n\nexport default ChatRoom;\n","import PersistentConversation from './persistent-conversation';\n\n/**\n * 服务号。\n *\n * 服务号不支持在客户端创建。\n * @since 4.0.0\n * @extends PersistentConversation\n * @public\n */\nclass ServiceConversation extends PersistentConversation {\n  /**\n   * 订阅该服务号\n   * @return {Promise.<this>} self\n   */\n  async subscribe() {\n    return this.join();\n  }\n\n  /**\n   * 退订该服务号\n   * @return {Promise.<this>} self\n   */\n  async unsubscribe() {\n    return this.quit();\n  }\n}\n\nexport default ServiceConversation;\n","import ConversationBase from './conversation-base';\nimport { createError, ErrorCode } from '../error';\nimport { decodeDate, getTime } from '../utils';\n\nconst transformNotFoundError = error =>\n  error.code === ErrorCode.CONVERSATION_NOT_FOUND\n    ? createError({ code: ErrorCode.TEMPORARY_CONVERSATION_EXPIRED })\n    : error;\n\n/**\n * 临时对话\n * @since 4.0.0\n * @extends ConversationBase\n * @public\n */\nclass TemporaryConversation extends ConversationBase {\n  /**\n   * 无法直接实例化，请使用 {@link IMClient#createTemporaryConversation} 创建新的临时对话。\n   */\n  constructor(data, { expiredAt }, client) {\n    super(\n      {\n        ...data,\n        expiredAt,\n      },\n      client\n    );\n  }\n\n  /**\n   * 对话失效时间\n   * @type {Date}\n   */\n  set expiredAt(value) {\n    this._expiredAt = decodeDate(value);\n  }\n\n  get expiredAt() {\n    return this._expiredAt;\n  }\n\n  /**\n   * 对话是否已失效\n   * @type {Boolean}\n   */\n  get expired() {\n    return this.expiredAt < new Date();\n  }\n\n  async _send(...args) {\n    if (this.expired)\n      throw createError({ code: ErrorCode.TEMPORARY_CONVERSATION_EXPIRED });\n    try {\n      return await super._send(...args);\n    } catch (error) {\n      throw transformNotFoundError(error);\n    }\n  }\n\n  async send(...args) {\n    try {\n      return await super.send(...args);\n    } catch (error) {\n      throw transformNotFoundError(error);\n    }\n  }\n\n  toFullJSON() {\n    const { expiredAt } = this;\n    return {\n      ...super.toFullJSON(),\n      expiredAt: getTime(expiredAt),\n    };\n  }\n\n  toJSON() {\n    const { expiredAt, expired } = this;\n    return {\n      ...super.toJSON(),\n      expiredAt,\n      expired,\n    };\n  }\n}\n\nexport default TemporaryConversation;\n","import d from 'debug';\n\nconst debug = d('LC:ConversationQuery');\n\nexport default class ConversationQuery {\n  static _encode(value) {\n    if (value instanceof Date) {\n      return { __type: 'Date', iso: value.toJSON() };\n    }\n    if (value instanceof RegExp) {\n      return value.source;\n    }\n    return value;\n  }\n\n  static _quote(s) {\n    return `\\\\Q${s.replace('\\\\E', '\\\\E\\\\\\\\E\\\\Q')}\\\\E`;\n  }\n\n  static _calculateFlag(options) {\n    return ['withLastMessagesRefreshed', 'compact'].reduce(\n      // eslint-disable-next-line no-bitwise\n      (prev, key) => (prev << 1) + Boolean(options[key]),\n      0\n    );\n  }\n\n  /**\n   * Create a ConversationQuery\n   * @param  {IMClient} client\n   */\n  constructor(client) {\n    this._client = client;\n    this._where = {};\n    this._extraOptions = {};\n  }\n\n  _addCondition(key, condition, value) {\n    // Check if we already have a condition\n    if (!this._where[key]) {\n      this._where[key] = {};\n    }\n    this._where[key][condition] = this.constructor._encode(value);\n    return this;\n  }\n\n  toJSON() {\n    const json = {\n      where: this._where,\n      flag: this.constructor._calculateFlag(this._extraOptions),\n    };\n    if (typeof this._skip !== 'undefined') json.skip = this._skip;\n    if (typeof this._limit !== 'undefined') json.limit = this._limit;\n    if (typeof this._order !== 'undefined') json.sort = this._order;\n    debug(json);\n    return json;\n  }\n\n  /**\n   * 增加查询条件，指定聊天室的组员包含某些成员即可返回\n   * @param {string[]} peerIds - 成员 ID 列表\n   * @return {ConversationQuery} self\n   */\n  containsMembers(peerIds) {\n    return this.containsAll('m', peerIds);\n  }\n\n  /**\n   * 增加查询条件，指定聊天室的组员条件满足条件的才返回\n   *\n   * @param {string[]} - 成员 ID 列表\n   * @param {Boolean} includeSelf - 是否包含自己\n   * @return {ConversationQuery} self\n   */\n  withMembers(peerIds, includeSelf) {\n    const peerIdsSet = new Set(peerIds);\n    if (includeSelf) {\n      peerIdsSet.add(this._client.id);\n    }\n    this.sizeEqualTo('m', peerIdsSet.size);\n    return this.containsMembers(Array.from(peerIdsSet));\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  equalTo(key, value) {\n    this._where[key] = this.constructor._encode(value);\n    return this;\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于条件时即可返回\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  lessThan(key, value) {\n    return this._addCondition(key, '$lt', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足小于等于条件时即可返回\n\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  lessThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$lte', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n\n  greaterThan(key, value) {\n    return this._addCondition(key, '$gt', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足大于等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n\n  greaterThanOrEqualTo(key, value) {\n    return this._addCondition(key, '$gte', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段满足不等于条件时即可返回\n   *\n   * @param {string} key\n   * @param value\n   * @return {ConversationQuery} self\n   */\n  notEqualTo(key, value) {\n    return this._addCondition(key, '$ne', value);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  exists(key) {\n    return this._addCondition(key, '$exists', true);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 不存在指定的字段时即可返回\n   *\n   * @since 3.5.0\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  doesNotExist(key) {\n    return this._addCondition(key, '$exists', false);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  containedIn(key, values) {\n    return this._addCondition(key, '$in', values);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值不包含在指定值中时即可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  notContainsIn(key, values) {\n    return this._addCondition(key, '$nin', values);\n  }\n\n  /**\n   * 增加查询条件，当conversation的属性中对应的字段中的元素包含所有的值才可返回\n   *\n   * @param {string} key\n   * @param values\n   * @return {ConversationQuery} self\n   */\n  containsAll(key, values) {\n    return this._addCondition(key, '$all', values);\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值包含此字符串即可返回\n   *\n   * @param {string} key\n   * @param {string} subString\n   * @return {ConversationQuery} self\n   */\n  contains(key, subString) {\n    return this._addCondition(\n      key,\n      '$regex',\n      ConversationQuery._quote(subString)\n    );\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串起始即可返回\n   *\n   * @param {string} key\n   * @param {string} prefix\n   * @return {ConversationQuery} self\n   */\n  startsWith(key, prefix) {\n    return this._addCondition(\n      key,\n      '$regex',\n      `^${ConversationQuery._quote(prefix)}`\n    );\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值以此字符串结束即可返回\n   *\n   * @param {string} key\n   * @param {string} suffix\n   * @return {ConversationQuery} self\n   */\n  endsWith(key, suffix) {\n    return this._addCondition(\n      key,\n      '$regex',\n      `${ConversationQuery._quote(suffix)}$`\n    );\n  }\n\n  /**\n   * 增加查询条件，当 conversation 的属性中对应的字段对应的值满足提供的正则表达式即可返回\n   *\n   * @param {string} key\n   * @param {RegExp} regex\n   * @return {ConversationQuery} self\n   */\n  matches(key, regex) {\n    this._addCondition(key, '$regex', regex);\n    // Javascript regex options support mig as inline options but store them\n    // as properties of the object. We support mi & should migrate them to\n    // modifiers\n    let _modifiers = '';\n    if (regex.ignoreCase) {\n      _modifiers += 'i';\n    }\n    if (regex.multiline) {\n      _modifiers += 'm';\n    }\n\n    if (_modifiers && _modifiers.length) {\n      this._addCondition(key, '$options', _modifiers);\n    }\n    return this;\n  }\n\n  /**\n   * 添加查询约束条件，查找 key 类型是数组，该数组的长度匹配提供的数值\n   *\n   * @param {string} key\n   * @param {Number} length\n   * @return {ConversationQuery} self\n   */\n  sizeEqualTo(key, length) {\n    return this._addCondition(key, '$size', length);\n  }\n\n  /**\n   * 设置返回集合的大小上限\n   *\n   * @param {Number} limit - 上限\n   * @return {ConversationQuery} self\n   */\n  limit(limit) {\n    this._limit = limit;\n    return this;\n  }\n\n  /**\n   * 设置返回集合的起始位置，一般用于分页\n   *\n   * @param {Number} skip - 起始位置跳过几个对象\n   * @return {ConversationQuery} self\n   */\n  skip(skip) {\n    this._skip = skip;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定key进行增序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  ascending(key) {\n    this._order = key;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定key进行增序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  addAscending(key) {\n    if (this._order) {\n      this._order += `,${key}`;\n    } else {\n      this._order = key;\n    }\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定 key 进行降序排列\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  descending(key) {\n    this._order = `-${key}`;\n    return this;\n  }\n\n  /**\n   * 设置返回集合按照指定 key 进行降序排列，如果已设置其他排序，原排序的优先级较高\n   *\n   * @param {string} key\n   * @return {ConversationQuery} self\n   */\n  addDescending(key) {\n    if (this._order) {\n      this._order += `,-${key}`;\n    } else {\n      this._order = `-${key}`;\n    }\n    return this;\n  }\n\n  /**\n   * 设置返回的 conversations 刷新最后一条消息\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  withLastMessagesRefreshed(enabled = true) {\n    this._extraOptions.withLastMessagesRefreshed = enabled;\n    return this;\n  }\n\n  /**\n   * 设置返回的 conversations 为精简模式，即不含成员列表\n   * @param  {Boolean} [enabled=true]\n   * @return {ConversationQuery} self\n   */\n  compact(enabled = true) {\n    this._extraOptions.compact = enabled;\n    return this;\n  }\n\n  /**\n   * 执行查询\n   * @return {Promise.<ConversationBase[]>}\n   */\n  async find() {\n    return this._client._executeQuery(this);\n  }\n}\n","import d from 'debug';\nimport { Expirable } from './utils';\n\nconst debug = d('LC:SessionManager');\n\nexport default class SessionManager {\n  constructor({ refresh, onBeforeGetSessionToken } = {}) {\n    this.refresh = refresh;\n    this._onBeforeGetSessionToken = onBeforeGetSessionToken;\n    this.setSessionToken(null, 0);\n  }\n\n  setSessionToken(token, ttl) {\n    debug('set session token', token, ttl);\n    const sessionToken = new Expirable(token, ttl * 1000);\n    this._sessionToken = sessionToken;\n    delete this._pendingSessionTokenPromise;\n    return sessionToken;\n  }\n\n  async setSessionTokenAsync(promise) {\n    const currentSessionToken = this._sessionToken;\n    this._pendingSessionTokenPromise = promise.catch(error => {\n      // revert, otherwise the following getSessionToken calls\n      // will all be rejected\n      this._sessionToken = currentSessionToken;\n      throw error;\n    });\n    return this.setSessionToken(...(await this._pendingSessionTokenPromise));\n  }\n\n  async getSessionToken({ autoRefresh = true } = {}) {\n    debug('get session token');\n    if (this._onBeforeGetSessionToken) {\n      this._onBeforeGetSessionToken(this);\n    }\n    const { value, originalValue } =\n      this._sessionToken || (await this._pendingSessionTokenPromise);\n    if (value === Expirable.EXPIRED && autoRefresh && this.refresh) {\n      debug('refresh expired session token');\n      const { value: newValue } = await this.setSessionTokenAsync(\n        this.refresh(this, originalValue)\n      );\n      debug('session token', newValue);\n      return newValue;\n    }\n    debug('session token', value);\n    return value;\n  }\n\n  revoke() {\n    if (this._sessionToken) this._sessionToken.expiredAt = -1;\n  }\n}\n","import EventEmitter from 'eventemitter3';\nimport { decode as decodeBase64 } from 'base64-arraybuffer';\nimport remove from 'lodash/remove';\nimport d from 'debug';\nimport {\n  Conversation,\n  ChatRoom,\n  ServiceConversation,\n  TemporaryConversation,\n} from './conversations';\nimport ConversationBase from './conversations/conversation-base';\nimport ConversationQuery from './conversation-query';\nimport {\n  GenericCommand,\n  SessionCommand,\n  ConvCommand,\n  AckCommand,\n  JsonObjectMessage,\n  ReadCommand,\n  ReadTuple,\n  CommandType,\n  OpType,\n} from '../proto/message';\nimport * as Event from './events/im';\nimport { ErrorCode, createError } from './error';\nimport {\n  Expirable,\n  Cache,\n  keyRemap,\n  trim,\n  internal,\n  throttle,\n  encode,\n  decode,\n  decodeDate,\n  getTime,\n} from './utils';\nimport { applyDecorators, applyDispatcher } from './plugin';\nimport SessionManager from './session-manager';\nimport runSignatureFactory from './signature-factory-runner';\nimport { MessageStatus } from './messages/message';\nimport { version as VERSION } from '../package.json';\n\nconst debug = d('LC:IMClient');\n\nconst {\n  INVITED,\n  KICKED,\n  MEMBERS_JOINED,\n  MEMBERS_LEFT,\n  MEMBER_INFO_UPDATED,\n  BLOCKED,\n  UNBLOCKED,\n  MEMBERS_BLOCKED,\n  MEMBERS_UNBLOCKED,\n  MUTED,\n  UNMUTED,\n  MEMBERS_MUTED,\n  MEMBERS_UNMUTED,\n  MESSAGE,\n  UNREAD_MESSAGES_COUNT_UPDATE,\n  CLOSE,\n  CONFLICT,\n  UNHANDLED_MESSAGE,\n  CONVERSATION_INFO_UPDATED,\n  MESSAGE_RECALL,\n  MESSAGE_UPDATE,\n  INFO_UPDATED,\n} = Event;\n\nconst isTemporaryConversatrionId = id => /^_tmp:/.test(id);\n\n/**\n * 1 patch-msg\n * 1 temp-conv-msg\n * 0 auto-bind-deviceid-and-installation\n * 1 transient-msg-ack\n * 1 keep-notification\n * 1 partial-failed-msg\n * @ignore\n */\nconst configBitmap = 0b111011;\n\nexport default class IMClient extends EventEmitter {\n  /**\n   * 无法直接实例化，请使用 {@link Realtime#createIMClient} 创建新的 IMClient。\n   *\n   * @extends EventEmitter\n   */\n  constructor(id, options = {}, props) {\n    if (!(id === undefined || typeof id === 'string')) {\n      throw new TypeError(`Client id [${id}] is not a String`);\n    }\n    super();\n    Object.assign(\n      this,\n      {\n        /**\n         * @var id {String} 客户端 id\n         * @memberof IMClient#\n         */\n        id,\n        options,\n      },\n      props\n    );\n\n    if (!this._messageParser) {\n      throw new Error('IMClient must be initialized with a MessageParser');\n    }\n    this._conversationCache = new Cache(`client:${this.id}`);\n    this._ackMessageBuffer = {};\n    internal(this).lastPatchTime = Date.now();\n    internal(this).lastNotificationTime = undefined;\n    internal(this)._eventemitter = new EventEmitter();\n    if (debug.enabled) {\n      Object.values(Event).forEach(event =>\n        this.on(event, (...payload) =>\n          this._debug(`${event} event emitted. %o`, payload)\n        )\n      );\n    }\n    // onIMClientCreate hook\n    applyDecorators(this._plugins.onIMClientCreate, this);\n  }\n\n  _debug(...params) {\n    debug(...params, `[${this.id}]`);\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  async _dispatchCommand(command) {\n    this._debug(trim(command), 'received');\n    if (command.serverTs) {\n      internal(this).lastNotificationTime = getTime(\n        decodeDate(command.serverTs)\n      );\n    }\n    switch (command.cmd) {\n      case CommandType.conv:\n        return this._dispatchConvMessage(command);\n      case CommandType.direct:\n        return this._dispatchDirectMessage(command);\n      case CommandType.session:\n        return this._dispatchSessionMessage(command);\n      case CommandType.unread:\n        return this._dispatchUnreadMessage(command);\n      case CommandType.rcp:\n        return this._dispatchRcpMessage(command);\n      case CommandType.patch:\n        return this._dispatchPatchMessage(command);\n      default:\n        return this.emit(UNHANDLED_MESSAGE, command);\n    }\n  }\n\n  async _dispatchSessionMessage(message) {\n    const {\n      sessionMessage: { code, reason },\n    } = message;\n    switch (message.op) {\n      case OpType.closed: {\n        internal(this)._eventemitter.emit('close');\n        if (code === ErrorCode.SESSION_CONFLICT) {\n          /**\n           * 用户在其他客户端登录，当前客户端被服务端强行下线。详见文档「单点登录」章节。\n           * @event IMClient#CONFLICT\n           * @param {Object} payload\n           * @param {string} payload.reason 原因\n           */\n          return this.emit(CONFLICT, {\n            reason,\n          });\n        }\n        /**\n         * 当前客户端被服务端强行下线\n         * @event IMClient#CLOSE\n         * @param {Object} payload\n         * @param {Number} payload.code 错误码\n         * @param {String} payload.reason 原因\n         */\n        return this.emit(CLOSE, {\n          code,\n          reason,\n        });\n      }\n      default:\n        this.emit(UNHANDLED_MESSAGE, message);\n        throw new Error('Unrecognized session command');\n    }\n  }\n\n  _dispatchUnreadMessage({ unreadMessage: { convs, notifTime } }) {\n    internal(this).lastUnreadNotifTime = notifTime;\n    // ensure all converstions are cached\n    return this.getConversations(convs.map(conv => conv.cid))\n      .then(() =>\n        // update conversations data\n        Promise.all(\n          convs.map(\n            ({\n              cid,\n              unread,\n              mid,\n              timestamp: ts,\n              from,\n              data,\n              binaryMsg,\n              patchTimestamp,\n              mentioned,\n            }) => {\n              const conversation = this._conversationCache.get(cid);\n              // deleted conversation\n              if (!conversation) return null;\n              let timestamp;\n              if (ts) {\n                timestamp = decodeDate(ts);\n                conversation.lastMessageAt = timestamp; // eslint-disable-line no-param-reassign\n              }\n              return (mid\n                ? this._messageParser.parse(binaryMsg || data).then(message => {\n                    const messageProps = {\n                      id: mid,\n                      cid,\n                      timestamp,\n                      updatedAt: patchTimestamp,\n                      from,\n                    };\n                    Object.assign(message, messageProps);\n                    conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n                  })\n                : Promise.resolve()\n              ).then(() => {\n                conversation._setUnreadMessagesMentioned(mentioned);\n                const countNotUpdated =\n                  unread === internal(conversation).unreadMessagesCount;\n                if (countNotUpdated) return null; // to be filtered\n                // manipulate internal property directly to skip unreadmessagescountupdate event\n                internal(conversation).unreadMessagesCount = unread;\n                return conversation;\n              });\n              // filter conversations without unread count update\n            }\n          )\n        ).then(conversations =>\n          conversations.filter(conversation => conversation)\n        )\n      )\n      .then(conversations => {\n        if (conversations.length) {\n          /**\n           * 未读消息数目更新\n           * @event IMClient#UNREAD_MESSAGES_COUNT_UPDATE\n           * @since 3.4.0\n           * @param {Conversation[]} conversations 未读消息数目有更新的对话列表\n           */\n          this.emit(UNREAD_MESSAGES_COUNT_UPDATE, conversations);\n        }\n      });\n  }\n\n  async _dispatchRcpMessage(message) {\n    const {\n      rcpMessage,\n      rcpMessage: { read },\n    } = message;\n    const conversationId = rcpMessage.cid;\n    const messageId = rcpMessage.id;\n    const timestamp = decodeDate(rcpMessage.t);\n    const conversation = this._conversationCache.get(conversationId);\n    // conversation not cached means the client does not send the message\n    // during this session\n    if (!conversation) return;\n    conversation._handleReceipt({ messageId, timestamp, read });\n  }\n\n  _dispatchPatchMessage({ patchMessage: { patches } }) {\n    // ensure all converstions are cached\n    return this.getConversations(patches.map(patch => patch.cid)).then(() =>\n      Promise.all(\n        patches.map(\n          ({\n            cid,\n            mid,\n            timestamp,\n            recall,\n            data,\n            patchTimestamp,\n            from,\n            binaryMsg,\n            mentionAll,\n            mentionPids,\n            patchCode,\n            patchReason,\n          }) => {\n            const conversation = this._conversationCache.get(cid);\n            // deleted conversation\n            if (!conversation) return null;\n            return this._messageParser\n              .parse(binaryMsg || data)\n              .then(message => {\n                const patchTime = getTime(decodeDate(patchTimestamp));\n                const messageProps = {\n                  id: mid,\n                  cid,\n                  timestamp,\n                  updatedAt: patchTime,\n                  from,\n                  mentionList: mentionPids,\n                  mentionedAll: mentionAll,\n                };\n                Object.assign(message, messageProps);\n                message._setStatus(MessageStatus.SENT);\n                message._updateMentioned(this.id);\n                if (internal(this).lastPatchTime < patchTime) {\n                  internal(this).lastPatchTime = patchTime;\n                }\n                // update conversation lastMessage\n                if (\n                  conversation.lastMessage &&\n                  conversation.lastMessage.id === mid\n                ) {\n                  conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n                }\n                let reason;\n                if (patchCode) {\n                  reason = {\n                    code: patchCode.toNumber(),\n                    detail: patchReason,\n                  };\n                }\n                if (recall) {\n                  /**\n                   * 消息被撤回\n                   * @event IMClient#MESSAGE_RECALL\n                   * @param {AVMessage} message 被撤回的消息\n                   * @param {ConversationBase} conversation 消息所在的会话\n                   * @param {PatchReason} [reason] 撤回的原因，不存在代表是发送者主动撤回\n                   */\n                  this.emit(MESSAGE_RECALL, message, conversation, reason);\n                  /**\n                   * 消息被撤回\n                   * @event ConversationBase#MESSAGE_RECALL\n                   * @param {AVMessage} message 被撤回的消息\n                   * @param {PatchReason} [reason] 撤回的原因，不存在代表是发送者主动撤回\n                   */\n                  conversation.emit(MESSAGE_RECALL, message, reason);\n                } else {\n                  /**\n                   * 消息被修改\n                   * @event IMClient#MESSAGE_UPDATE\n                   * @param {AVMessage} message 被修改的消息\n                   * @param {ConversationBase} conversation 消息所在的会话\n                   * @param {PatchReason} [reason] 修改的原因，不存在代表是发送者主动修改\n                   */\n                  this.emit(MESSAGE_UPDATE, message, conversation, reason);\n                  /**\n                   * 消息被修改\n                   * @event ConversationBase#MESSAGE_UPDATE\n                   * @param {AVMessage} message 被修改的消息\n                   * @param {PatchReason} [reason] 修改的原因，不存在代表是发送者主动修改\n                   */\n                  conversation.emit(MESSAGE_UPDATE, message, reason);\n                }\n              });\n          }\n        )\n      )\n    );\n  }\n\n  async _dispatchConvMessage(message) {\n    const {\n      convMessage,\n      convMessage: { initBy, m, info, attr },\n    } = message;\n    const conversation = await this.getConversation(convMessage.cid);\n    switch (message.op) {\n      case OpType.joined: {\n        conversation._addMembers([this.id]);\n        const payload = {\n          invitedBy: initBy,\n        };\n        /**\n         * 当前用户被添加至某个对话\n         * @event IMClient#INVITED\n         * @param {Object} payload\n         * @param {String} payload.invitedBy 邀请者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(INVITED, payload, conversation);\n        /**\n         * 当前用户被添加至当前对话\n         * @event ConversationBase#INVITED\n         * @param {Object} payload\n         * @param {String} payload.invitedBy 该移除操作的发起者 id\n         */\n        conversation.emit(INVITED, payload);\n        return;\n      }\n      case OpType.left: {\n        conversation._removeMembers([this.id]);\n        const payload = {\n          kickedBy: initBy,\n        };\n        /**\n         * 当前用户被从某个对话中移除\n         * @event IMClient#KICKED\n         * @param {Object} payload\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(KICKED, payload, conversation);\n        /**\n         * 当前用户被从当前对话中移除\n         * @event ConversationBase#KICKED\n         * @param {Object} payload\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         */\n        conversation.emit(KICKED, payload);\n        return;\n      }\n      case OpType.members_joined: {\n        conversation._addMembers(m);\n        const payload = {\n          invitedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有用户被添加至某个对话\n         * @event IMClient#MEMBERS_JOINED\n         * @param {Object} payload\n         * @param {String[]} payload.members 被添加的用户 id 列表\n         * @param {String} payload.invitedBy 邀请者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_JOINED, payload, conversation);\n        /**\n         * 有成员被添加至当前对话\n         * @event ConversationBase#MEMBERS_JOINED\n         * @param {Object} payload\n         * @param {String[]} payload.members 被添加的成员 id 列表\n         * @param {String} payload.invitedBy 邀请者 id\n         */\n        conversation.emit(MEMBERS_JOINED, payload);\n        return;\n      }\n      case OpType.members_left: {\n        conversation._removeMembers(m);\n        const payload = {\n          kickedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被从某个对话中移除\n         * @event IMClient#MEMBERS_LEFT\n         * @param {Object} payload\n         * @param {String[]} payload.members 被移除的成员 id 列表\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_LEFT, payload, conversation);\n        /**\n         * 有成员被从当前对话中移除\n         * @event ConversationBase#MEMBERS_LEFT\n         * @param {Object} payload\n         * @param {String[]} payload.members 被移除的成员 id 列表\n         * @param {String} payload.kickedBy 该移除操作的发起者 id\n         */\n        conversation.emit(MEMBERS_LEFT, payload);\n        return;\n      }\n      case OpType.members_blocked: {\n        const payload = {\n          blockedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被加入某个对话的黑名单\n         * @event IMClient#MEMBERS_BLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_BLOCKED, payload, conversation);\n        /**\n         * 有成员被加入当前对话的黑名单\n         * @event ConversationBase#MEMBERS_BLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_BLOCKED, payload);\n        return;\n      }\n      case OpType.members_unblocked: {\n        const payload = {\n          unblockedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员被移出某个对话的黑名单\n         * @event IMClient#MEMBERS_UNBLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_UNBLOCKED, payload, conversation);\n        /**\n         * 有成员被移出当前对话的黑名单\n         * @event ConversationBase#MEMBERS_UNBLOCKED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_UNBLOCKED, payload);\n        return;\n      }\n      case OpType.blocked: {\n        const payload = {\n          blockedBy: initBy,\n        };\n        /**\n         * 当前用户被加入某个对话的黑名单\n         * @event IMClient#BLOCKED\n         * @param {Object} payload\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(BLOCKED, payload, conversation);\n        /**\n         * 当前用户被加入当前对话的黑名单\n         * @event ConversationBase#BLOCKED\n         * @param {Object} payload\n         * @param {String} payload.blockedBy 该操作的发起者 id\n         */\n        conversation.emit(BLOCKED, payload);\n        return;\n      }\n      case OpType.unblocked: {\n        const payload = {\n          unblockedBy: initBy,\n        };\n        /**\n         * 当前用户被移出某个对话的黑名单\n         * @event IMClient#UNBLOCKED\n         * @param {Object} payload\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(UNBLOCKED, payload, conversation);\n        /**\n         * 当前用户被移出当前对话的黑名单\n         * @event ConversationBase#UNBLOCKED\n         * @param {Object} payload\n         * @param {String} payload.unblockedBy 该操作的发起者 id\n         */\n        conversation.emit(UNBLOCKED, payload);\n        return;\n      }\n      case OpType.members_shutuped: {\n        const payload = {\n          mutedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员在某个对话中被禁言\n         * @event IMClient#MEMBERS_MUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_MUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被禁言\n         * @event ConversationBase#MEMBERS_MUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_MUTED, payload);\n        return;\n      }\n      case OpType.members_unshutuped: {\n        const payload = {\n          unmutedBy: initBy,\n          members: m,\n        };\n        /**\n         * 有成员在某个对话中被解除禁言\n         * @event IMClient#MEMBERS_UNMUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBERS_UNMUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被解除禁言\n         * @event ConversationBase#MEMBERS_UNMUTED\n         * @param {Object} payload\n         * @param {String[]} payload.members 成员 id 列表\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBERS_UNMUTED, payload);\n        return;\n      }\n      case OpType.shutuped: {\n        const payload = {\n          mutedBy: initBy,\n        };\n        /**\n         * 有成员在某个对话中被禁言\n         * @event IMClient#MUTED\n         * @param {Object} payload\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被禁言\n         * @event ConversationBase#MUTED\n         * @param {Object} payload\n         * @param {String} payload.mutedBy 该操作的发起者 id\n         */\n        conversation.emit(MUTED, payload);\n        return;\n      }\n      case OpType.unshutuped: {\n        const payload = {\n          unmutedBy: initBy,\n        };\n        /**\n         * 有成员在某个对话中被解除禁言\n         * @event IMClient#UNMUTED\n         * @param {Object} payload\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(UNMUTED, payload, conversation);\n        /**\n         * 有成员在当前对话中被解除禁言\n         * @event ConversationBase#UNMUTED\n         * @param {Object} payload\n         * @param {String} payload.unmutedBy 该操作的发起者 id\n         */\n        conversation.emit(UNMUTED, payload);\n        return;\n      }\n      case OpType.member_info_changed: {\n        const { pid, role } = info;\n        const { memberInfoMap } = internal(conversation);\n        // 如果不存在缓存，且不是 role 的更新，则不通知\n        if (!memberInfoMap && !role) return;\n        const memberInfo = await conversation.getMemberInfo(pid);\n        internal(memberInfo).role = role;\n        const payload = {\n          member: pid,\n          memberInfo,\n          updatedBy: initBy,\n        };\n        /**\n         * 有成员的对话信息被更新\n         * @event IMClient#MEMBER_INFO_UPDATED\n         * @param {Object} payload\n         * @param {String} payload.member 被更新对话信息的成员 id\n         * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(MEMBER_INFO_UPDATED, payload, conversation);\n        /**\n         * 有成员的对话信息被更新\n         * @event ConversationBase#MEMBER_INFO_UPDATED\n         * @param {Object} payload\n         * @param {String} payload.member 被更新对话信息的成员 id\n         * @param {ConversationMumberInfo} payload.memberInfo 被更新的成员对话信息\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         */\n        conversation.emit(MEMBER_INFO_UPDATED, payload);\n        return;\n      }\n      case OpType.updated: {\n        const attributes = decode(JSON.parse(attr.data));\n        conversation._updateServerAttributes(attributes);\n        const payload = {\n          attributes,\n          updatedBy: initBy,\n        };\n        /**\n         * 该对话信息被更新\n         * @event IMClient#CONVERSATION_INFO_UPDATED\n         * @param {Object} payload\n         * @param {Object} payload.attributes 被更新的属性\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         * @param {ConversationBase} conversation\n         */\n        this.emit(CONVERSATION_INFO_UPDATED, payload, conversation);\n        /**\n         * 有对话信息被更新\n         * @event ConversationBase#INFO_UPDATED\n         * @param {Object} payload\n         * @param {Object} payload.attributes 被更新的属性\n         * @param {String} payload.updatedBy 该操作的发起者 id\n         */\n        conversation.emit(INFO_UPDATED, payload);\n        return;\n      }\n      default:\n        this.emit(UNHANDLED_MESSAGE, message);\n        throw new Error('Unrecognized conversation command');\n    }\n  }\n\n  _dispatchDirectMessage(originalMessage) {\n    const {\n      directMessage,\n      directMessage: {\n        id,\n        cid,\n        fromPeerId,\n        timestamp,\n        transient,\n        patchTimestamp,\n        mentionPids,\n        mentionAll,\n        binaryMsg,\n        msg,\n      },\n    } = originalMessage;\n    const content = binaryMsg ? binaryMsg.toArrayBuffer() : msg;\n    return Promise.all([\n      this.getConversation(directMessage.cid),\n      this._messageParser.parse(content),\n    ]).then(([conversation, message]) => {\n      // deleted conversation\n      if (!conversation) return undefined;\n      const messageProps = {\n        id,\n        cid,\n        timestamp,\n        updatedAt: patchTimestamp,\n        from: fromPeerId,\n        mentionList: mentionPids,\n        mentionedAll: mentionAll,\n      };\n      Object.assign(message, messageProps);\n      message._updateMentioned(this.id);\n      message._setStatus(MessageStatus.SENT);\n      // filter outgoing message sent from another device\n      if (message.from !== this.id) {\n        if (!(transient || conversation.transient)) {\n          this._sendAck(message);\n        }\n      }\n      return this._dispatchParsedMessage(message, conversation);\n    });\n  }\n\n  _dispatchParsedMessage(message, conversation) {\n    // beforeMessageDispatch hook\n    return applyDispatcher(this._plugins.beforeMessageDispatch, [\n      message,\n      conversation,\n    ]).then(shouldDispatch => {\n      if (shouldDispatch === false) return;\n      conversation.lastMessage = message; // eslint-disable-line no-param-reassign\n      conversation.lastMessageAt = message.timestamp; // eslint-disable-line no-param-reassign\n      // filter outgoing message sent from another device\n      if (message.from !== this.id) {\n        conversation.unreadMessagesCount += 1; // eslint-disable-line no-param-reassign\n        if (message.mentioned) conversation._setUnreadMessagesMentioned(true);\n      }\n      /**\n       * 当前用户收到消息\n       * @event IMClient#MESSAGE\n       * @param {Message} message\n       * @param {ConversationBase} conversation 收到消息的对话\n       */\n      this.emit(MESSAGE, message, conversation);\n      /**\n       * 当前对话收到消息\n       * @event ConversationBase#MESSAGE\n       * @param {Message} message\n       */\n      conversation.emit(MESSAGE, message);\n    });\n  }\n\n  _sendAck(message) {\n    this._debug('send ack for %O', message);\n    const { cid } = message;\n    if (!cid) {\n      throw new Error('missing cid');\n    }\n    if (!this._ackMessageBuffer[cid]) {\n      this._ackMessageBuffer[cid] = [];\n    }\n    this._ackMessageBuffer[cid].push(message);\n    return this._doSendAck();\n  }\n\n  // jsdoc-ignore-start\n  @throttle(1000)\n  // jsdoc-ignore-end\n  _doSendAck() {\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n    this._debug('do send ack %O', this._ackMessageBuffer);\n    Promise.all(\n      Object.keys(this._ackMessageBuffer).map(cid => {\n        const convAckMessages = this._ackMessageBuffer[cid];\n        const timestamps = convAckMessages.map(message => message.timestamp);\n        const command = new GenericCommand({\n          cmd: 'ack',\n          peerId: this.id,\n          ackMessage: new AckCommand({\n            cid,\n            fromts: Math.min.apply(null, timestamps),\n            tots: Math.max.apply(null, timestamps),\n          }),\n        });\n        delete this._ackMessageBuffer[cid];\n        return this._send(command, false).catch(error => {\n          this._debug('send ack failed: %O', error);\n          this._ackMessageBuffer[cid] = convAckMessages;\n        });\n      })\n    );\n  }\n\n  _omitPeerId(value) {\n    internal(this).peerIdOmittable = value;\n  }\n\n  _send(cmd, ...args) {\n    const command = cmd;\n    if (!internal(this).peerIdOmittable && this.id) {\n      command.peerId = this.id;\n    }\n    return this._connection.send(command, ...args);\n  }\n\n  async _open(appId, tag, deviceId, isReconnect = false) {\n    this._debug('open session');\n    const { lastUnreadNotifTime, lastPatchTime } = internal(this);\n    const command = new GenericCommand({\n      cmd: 'session',\n      op: 'open',\n      appId,\n      peerId: this.id,\n      sessionMessage: new SessionCommand({\n        ua: `js/${VERSION}`,\n        r: isReconnect,\n        lastUnreadNotifTime,\n        lastPatchTime,\n        configBitmap,\n      }),\n    });\n    if (!isReconnect) {\n      Object.assign(\n        command.sessionMessage,\n        trim({\n          tag,\n          deviceId,\n        })\n      );\n      if (this.options.signatureFactory) {\n        const signatureResult = await runSignatureFactory(\n          this.options.signatureFactory,\n          [this._identity]\n        );\n        Object.assign(\n          command.sessionMessage,\n          keyRemap(\n            {\n              signature: 's',\n              timestamp: 't',\n              nonce: 'n',\n            },\n            signatureResult\n          )\n        );\n      }\n    } else {\n      const sessionToken = await this._sessionManager.getSessionToken({\n        autoRefresh: false,\n      });\n      if (sessionToken && sessionToken !== Expirable.EXPIRED) {\n        Object.assign(command.sessionMessage, {\n          st: sessionToken,\n        });\n      }\n    }\n    let resCommand;\n    try {\n      resCommand = await this._send(command);\n    } catch (error) {\n      if (error.code === ErrorCode.SESSION_TOKEN_EXPIRED) {\n        if (!this._sessionManager) {\n          // let it fail if sessoinToken not cached but command rejected as token expired\n          // to prevent session openning flood\n          throw new Error('Unexpected session expiration');\n        }\n        debug('Session token expired, reopening');\n        this._sessionManager.revoke();\n        return this._open(appId, tag, deviceId, isReconnect);\n      }\n      throw error;\n    }\n    const {\n      peerId,\n      sessionMessage,\n      sessionMessage: { st: token, stTtl: tokenTTL, code },\n      serverTs,\n    } = resCommand;\n    if (code) {\n      throw createError(sessionMessage);\n    }\n    if (peerId) {\n      this.id = peerId;\n      if (!this._identity) this._identity = peerId;\n      if (token) {\n        this._sessionManager =\n          this._sessionManager || this._createSessionManager();\n        this._sessionManager.setSessionToken(token, tokenTTL);\n      }\n      if (serverTs) {\n        internal(this).lastPatchTime = getTime(decodeDate(serverTs));\n      }\n      if (internal(this).lastNotificationTime) {\n        // Do not await for it as this is failable\n        this._syncNotifications(internal(this).lastNotificationTime).catch(\n          error => console.warn('Syncing notifications failed:', error)\n        );\n      } else {\n        // Set timestamp to now for next reconnection\n        internal(this).lastNotificationTime = Date.now();\n      }\n    } else {\n      console.warn('Unexpected session opened without peerId.');\n    }\n    return undefined;\n  }\n\n  async _syncNotifications(timestamp) {\n    const { hasMore, notifications } = await this._fetchNotifications(\n      timestamp\n    );\n    notifications.forEach(notification => {\n      const { cmd, op, serverTs, ...payload } = notification;\n      this._dispatchCommand({\n        cmd: CommandType[cmd],\n        op: OpType[op],\n        serverTs,\n        [`${cmd}Message`]: payload,\n      });\n    });\n    if (hasMore) {\n      return this._syncNotifications(internal(this).lastNotificationTime);\n    }\n    return undefined;\n  }\n\n  async _fetchNotifications(timestamp) {\n    return this._requestWithSessionToken({\n      method: 'GET',\n      path: '/rtm/notifications',\n      query: {\n        start_ts: timestamp,\n        notification_type: 'permanent',\n      },\n    });\n  }\n\n  _createSessionManager() {\n    debug('create SessionManager');\n    return new SessionManager({\n      onBeforeGetSessionToken: this._connection.checkConnectionAvailability.bind(\n        this._connection\n      ),\n      refresh: (manager, expiredSessionToken) =>\n        manager.setSessionTokenAsync(\n          Promise.resolve(\n            new GenericCommand({\n              cmd: 'session',\n              op: 'refresh',\n              sessionMessage: new SessionCommand({\n                ua: `js/${VERSION}`,\n                st: expiredSessionToken,\n              }),\n            })\n          )\n            .then(async command => {\n              if (this.options.signatureFactory) {\n                const signatureResult = await runSignatureFactory(\n                  this.options.signatureFactory,\n                  [this._identity]\n                );\n                Object.assign(\n                  command.sessionMessage,\n                  keyRemap(\n                    {\n                      signature: 's',\n                      timestamp: 't',\n                      nonce: 'n',\n                    },\n                    signatureResult\n                  )\n                );\n              }\n              return command;\n            })\n            .then(this._send.bind(this))\n            .then(({ sessionMessage: { st: token, stTtl: ttl } }) => [\n              token,\n              ttl,\n            ])\n        ),\n    });\n  }\n\n  async _requestWithSessionToken({ headers, query, ...params }) {\n    const sessionToken = await this._sessionManager.getSessionToken();\n    return this._request({\n      headers: {\n        'X-LC-IM-Session-Token': sessionToken,\n        ...headers,\n      },\n      query: {\n        client_id: this.id,\n        ...query,\n      },\n      ...params,\n    });\n  }\n\n  /**\n   * 关闭客户端\n   * @return {Promise}\n   */\n  async close() {\n    this._debug('close session');\n    const _ee = internal(this)._eventemitter;\n    _ee.emit('beforeclose');\n    if (this._connection.is('connected')) {\n      const command = new GenericCommand({\n        cmd: 'session',\n        op: 'close',\n      });\n      await this._send(command);\n    }\n    _ee.emit('close');\n    this.emit(CLOSE, {\n      code: 0,\n    });\n  }\n\n  /**\n   * 获取 client 列表中在线的 client，每次查询最多 20 个 clientId，超出部分会被忽略\n   * @param  {String[]} clientIds 要查询的 client ids\n   * @return {Primse.<String[]>} 在线的 client ids\n   */\n  async ping(clientIds) {\n    this._debug('ping');\n    if (!(clientIds instanceof Array)) {\n      throw new TypeError(`clientIds ${clientIds} is not an Array`);\n    }\n    if (!clientIds.length) {\n      return Promise.resolve([]);\n    }\n    const command = new GenericCommand({\n      cmd: 'session',\n      op: 'query',\n      sessionMessage: new SessionCommand({\n        sessionPeerIds: clientIds,\n      }),\n    });\n    const resCommand = await this._send(command);\n    return resCommand.sessionMessage.onlineSessionPeerIds;\n  }\n\n  /**\n   * 获取某个特定的对话\n   * @param  {String} id 对话 id，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase>} 如果 id 对应的对话不存在则返回 null\n   */\n  async getConversation(id, noCache = false) {\n    if (typeof id !== 'string') {\n      throw new TypeError(`${id} is not a String`);\n    }\n    if (!noCache) {\n      const cachedConversation = this._conversationCache.get(id);\n      if (cachedConversation) {\n        return cachedConversation;\n      }\n    }\n    if (isTemporaryConversatrionId(id)) {\n      return (await this._getTemporaryConversations([id]))[0] || null;\n    }\n    return this.getQuery()\n      .equalTo('objectId', id)\n      .find()\n      .then(conversations => conversations[0] || null);\n  }\n\n  /**\n   * 通过 id 批量获取某个特定的对话\n   * @since 3.4.0\n   * @param  {String[]} ids 对话 id 列表，对应 _Conversation 表中的 objectId\n   * @param  {Boolean} [noCache=false] 强制不从缓存中获取\n   * @return {Promise.<ConversationBase[]>} 如果 id 对应的对话不存在则返回 null\n   */\n  async getConversations(ids, noCache = false) {\n    const remoteConversationIds = noCache\n      ? ids\n      : ids.filter(id => this._conversationCache.get(id) === null);\n    if (remoteConversationIds.length) {\n      const remoteTemporaryConversationIds = remove(\n        remoteConversationIds,\n        isTemporaryConversatrionId\n      );\n      const query = [];\n      if (remoteConversationIds.length) {\n        query.push(\n          this.getQuery()\n            .containedIn('objectId', remoteConversationIds)\n            .limit(999)\n            .find()\n        );\n      }\n      if (remoteTemporaryConversationIds.length) {\n        const remoteTemporaryConversationsPromise = remoteTemporaryConversationIds.map(\n          this._getTemporaryConversations.bind(this)\n        );\n        query.push(...remoteTemporaryConversationsPromise);\n      }\n      await Promise.all(query);\n    }\n    return ids.map(id => this._conversationCache.get(id));\n  }\n\n  async _getTemporaryConversations(ids) {\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'query',\n      convMessage: new ConvCommand({\n        tempConvIds: ids,\n      }),\n    });\n    const resCommand = await this._send(command);\n    return this._handleQueryResults(resCommand);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询对话\n   * @return {ConversationQuery.<PersistentConversation>}\n   */\n  getQuery() {\n    return new ConversationQuery(this);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询聊天室\n   * @return {ConversationQuery.<ChatRoom>}\n   */\n  getChatRoomQuery() {\n    return this.getQuery().equalTo('tr', true);\n  }\n\n  /**\n   * 构造一个 ConversationQuery 来查询服务号\n   * @return {ConversationQuery.<ServiceConversation>}\n   */\n  getServiceConversationQuery() {\n    return this.getQuery().equalTo('sys', true);\n  }\n\n  async _executeQuery(query) {\n    const queryJSON = query.toJSON();\n    queryJSON.where = new JsonObjectMessage({\n      data: JSON.stringify(encode(queryJSON.where)),\n    });\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'query',\n      convMessage: new ConvCommand(queryJSON),\n    });\n    const resCommand = await this._send(command);\n    return this._handleQueryResults(resCommand);\n  }\n\n  async _handleQueryResults(resCommand) {\n    let conversations;\n    try {\n      conversations = decode(JSON.parse(resCommand.convMessage.results.data));\n    } catch (error) {\n      const commandString = JSON.stringify(trim(resCommand));\n      throw new Error(\n        `Parse query result failed: ${error.message}. Command: ${commandString}`\n      );\n    }\n    conversations = await Promise.all(\n      conversations.map(this._parseConversationFromRawData.bind(this))\n    );\n    return conversations.map(this._upsertConversationToCache.bind(this));\n  }\n\n  _upsertConversationToCache(fetchedConversation) {\n    let conversation = this._conversationCache.get(fetchedConversation.id);\n    if (!conversation) {\n      conversation = fetchedConversation;\n      this._debug('no match, set cache');\n      this._conversationCache.set(fetchedConversation.id, fetchedConversation);\n    } else {\n      this._debug('update cached conversation');\n      [\n        'creator',\n        'createdAt',\n        'updatedAt',\n        'lastMessageAt',\n        'lastMessage',\n        'mutedMembers',\n        'members',\n        '_attributes',\n        'transient',\n        'muted',\n      ].forEach(key => {\n        const value = fetchedConversation[key];\n        if (value !== undefined) conversation[key] = value;\n      });\n      if (conversation._reset) conversation._reset();\n    }\n    return conversation;\n  }\n\n  /**\n   * 反序列化消息，与 {@link Message#toFullJSON} 相对。\n   * @param {Object}\n   * @return {AVMessage} 解析后的消息\n   * @since 4.0.0\n   */\n  async parseMessage({ data, bin = false, ...properties }) {\n    const content = bin ? decodeBase64(data) : data;\n    const message = await this._messageParser.parse(content);\n    Object.assign(message, properties);\n    message._updateMentioned(this.id);\n    return message;\n  }\n\n  /**\n   * 反序列化对话，与 {@link Conversation#toFullJSON} 相对。\n   * @param {Object}\n   * @return {ConversationBase} 解析后的对话\n   * @since 4.0.0\n   */\n  async parseConversation({\n    id,\n    lastMessageAt,\n    lastMessage,\n    lastDeliveredAt,\n    lastReadAt,\n    unreadMessagesCount,\n    members,\n    mentioned,\n    ...properties\n  }) {\n    const conversationData = {\n      id,\n      lastMessageAt,\n      lastMessage,\n      lastDeliveredAt,\n      lastReadAt,\n      unreadMessagesCount,\n      members,\n      mentioned,\n    };\n    if (lastMessage) {\n      conversationData.lastMessage = await this.parseMessage(lastMessage);\n      conversationData.lastMessage._setStatus(MessageStatus.SENT);\n    }\n    const { transient, system, expiredAt } = properties;\n    if (transient) return new ChatRoom(conversationData, properties, this);\n    if (system)\n      return new ServiceConversation(conversationData, properties, this);\n    if (expiredAt || isTemporaryConversatrionId(id)) {\n      return new TemporaryConversation(conversationData, { expiredAt }, this);\n    }\n    return new Conversation(conversationData, properties, this);\n  }\n\n  async _parseConversationFromRawData(rawData) {\n    const data = keyRemap(\n      {\n        objectId: 'id',\n        lm: 'lastMessageAt',\n        m: 'members',\n        tr: 'transient',\n        sys: 'system',\n        c: 'creator',\n        mu: 'mutedMembers',\n      },\n      rawData\n    );\n    if (data.msg) {\n      data.lastMessage = {\n        data: data.msg,\n        bin: data.bin,\n        from: data.msg_from,\n        id: data.msg_mid,\n        timestamp: data.msg_timestamp,\n        updatedAt: data.patch_timestamp,\n      };\n      delete data.lastMessageFrom;\n      delete data.lastMessageId;\n      delete data.lastMessageTimestamp;\n      delete data.lastMessagePatchTimestamp;\n    }\n    const { ttl } = data;\n    if (ttl) data.expiredAt = Date.now() + ttl * 1000;\n    return this.parseConversation(data);\n  }\n\n  /**\n   * 创建一个对话\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.name] 对话的名字\n   * @param {Boolean} [options.unique=false] 唯一对话，当其为 true 时，如果当前已经有相同成员的对话存在则返回该对话，否则会创建新的对话\n   * @return {Promise.<Conversation>}\n   */\n  async createConversation({\n    members: m,\n    name,\n    transient,\n    unique,\n    _tempConv: tempConv,\n    _tempConvTTL: tempConvTTL,\n    ...properties\n  } = {}) {\n    if (!(transient || Array.isArray(m))) {\n      throw new TypeError(`conversation members ${m} is not an array`);\n    }\n    let members = new Set(m);\n    members.add(this.id);\n    members = Array.from(members).sort();\n    let attr = properties || {};\n    if (name) {\n      if (typeof name !== 'string') {\n        throw new TypeError(`conversation name ${name} is not a string`);\n      }\n      attr.name = name;\n    }\n    attr = new JsonObjectMessage({\n      data: JSON.stringify(encode(attr)),\n    });\n\n    const startCommandJson = {\n      m: members,\n      attr,\n      transient,\n      unique,\n      tempConv,\n      tempConvTTL,\n    };\n\n    const command = new GenericCommand({\n      cmd: 'conv',\n      op: 'start',\n      convMessage: new ConvCommand(startCommandJson),\n    });\n\n    if (this.options.conversationSignatureFactory) {\n      const params = [null, this._identity, members, 'create'];\n      const signatureResult = await runSignatureFactory(\n        this.options.conversationSignatureFactory,\n        params\n      );\n      Object.assign(\n        command.convMessage,\n        keyRemap(\n          {\n            signature: 's',\n            timestamp: 't',\n            nonce: 'n',\n          },\n          signatureResult\n        )\n      );\n    }\n\n    const {\n      convMessage: { cid, cdate, tempConvTTL: ttl },\n    } = await this._send(command);\n    const data = {\n      name,\n      transient,\n      unique,\n      id: cid,\n      createdAt: cdate,\n      updatedAt: cdate,\n      lastMessageAt: null,\n      creator: this.id,\n      members: transient ? [] : members,\n      ...properties,\n    };\n    if (ttl) data.expiredAt = Date.now() + ttl * 1000;\n    const conversation = await this.parseConversation(data);\n    return this._upsertConversationToCache(conversation);\n  }\n\n  /**\n   * 创建一个聊天室\n   * @since 4.0.0\n   * @param {Object} options 除了下列字段外的其他字段将被视为对话的自定义属性\n   * @param {String} [options.name] 对话的名字\n   * @return {Promise.<ChatRoom>}\n   */\n  async createChatRoom(param) {\n    return this.createConversation({\n      ...param,\n      transient: true,\n      members: null,\n      unique: false,\n      _tempConv: false,\n    });\n  }\n\n  /**\n   * 创建一个临时对话\n   * @since 4.0.0\n   * @param {Object} options\n   * @param {String[]} options.members 对话的初始成员列表，默认包含当前 client\n   * @param {String} [options.ttl] 对话存在时间，单位为秒，最大值与默认值均为 86400（一天），过期后该对话不再可用。\n   * @return {Promise.<TemporaryConversation>}\n   */\n  async createTemporaryConversation({ ttl: _tempConvTTL, ...param }) {\n    return this.createConversation({\n      ...param,\n      transient: false,\n      unique: false,\n      _tempConv: true,\n      _tempConvTTL,\n    });\n  }\n\n  // jsdoc-ignore-start\n  @throttle(1000)\n  // jsdoc-ignore-end\n  _doSendRead() {\n    // if not connected, just skip everything\n    if (!this._connection.is('connected')) return;\n    const buffer = internal(this).readConversationsBuffer;\n    const conversations = Array.from(buffer);\n    if (!conversations.length) return;\n    const ids = conversations.map(conversation => {\n      if (!(conversation instanceof ConversationBase)) {\n        throw new TypeError(`${conversation} is not a Conversation`);\n      }\n      return conversation.id;\n    });\n    this._debug(`mark [${ids}] as read`);\n    buffer.clear();\n    this._sendReadCommand(conversations).catch(error => {\n      this._debug('send read failed: %O', error);\n      conversations.forEach(buffer.add.bind(buffer));\n    });\n  }\n\n  _sendReadCommand(conversations) {\n    return this._send(\n      new GenericCommand({\n        cmd: 'read',\n        readMessage: new ReadCommand({\n          convs: conversations.map(\n            conversation =>\n              new ReadTuple({\n                cid: conversation.id,\n                mid:\n                  conversation.lastMessage &&\n                  conversation.lastMessage.from !== this.id\n                    ? conversation.lastMessage.id\n                    : undefined,\n                timestamp: (conversation.lastMessageAt || new Date()).getTime(),\n              })\n          ),\n        }),\n      }),\n      false\n    );\n  }\n}\n\n/**\n * 修改、撤回消息的原因\n * @typedef PatchReason\n * @type {Object}\n * @property {number} code 负数为内置 code，正数为开发者在 hook 中自定义的 code。比如因为敏感词过滤被修改的 code 为 -4408。\n * @property {string} [detail] 具体的原因说明。\n */\n","export {\n  DISCONNECT,\n  RECONNECT,\n  RETRY,\n  SCHEDULE,\n  OFFLINE,\n  ONLINE,\n} from '../websocket-plus';\n\nexport const RECONNECT_ERROR = 'reconnecterror';\n","import { encode as encodeBase64 } from 'base64-arraybuffer';\nimport Message from './message';\nimport { IE10Compatible } from './helpers';\n// jsdoc-ignore-start\n@IE10Compatible\n// jsdoc-ignore-end\nexport default class BinaryMessage extends Message {\n  /**\n   * 二进制消息\n   * @extends Message\n   * @param {ArrayBuffer} buffer\n   * @since 4.0.0\n   */\n  constructor(buffer) {\n    if (!(buffer instanceof ArrayBuffer)) {\n      throw new TypeError(`${buffer} is not an ArrayBuffer`);\n    }\n    super(buffer);\n  }\n\n  /**\n   * @type ArrayBuffer\n   */\n  get buffer() {\n    return this.content;\n  }\n\n  set buffer(buffer) {\n    this.content = buffer;\n  }\n\n  static validate(target) {\n    return target instanceof ArrayBuffer;\n  }\n\n  toJSON() {\n    return {\n      ...super._toJSON(),\n      data: encodeBase64(this.content),\n    };\n  }\n\n  toFullJSON() {\n    return {\n      ...super.toFullJSON(),\n      bin: true,\n      data: encodeBase64(this.content),\n    };\n  }\n}\n","import TypedMessage from './typed-message';\nimport { messageType, IE10Compatible } from './helpers';\n\n// jsdoc-ignore-start\n@messageType(-1)\n@IE10Compatible\n// jsdoc-ignore-end\nexport default class TextMessage extends TypedMessage {\n  /**\n   * 文类类型消息\n   * @extends TypedMessage\n   * @param  {String} [text='']\n   * @throws {TypeError} text 不是 String 类型\n   */\n  constructor(text = '') {\n    if (typeof text !== 'string') {\n      throw new TypeError(`${text} is not a string`);\n    }\n    super();\n    this.setText(text);\n  }\n}\n\n/**\n * @name TYPE\n * @memberof TextMessage\n * @type Number\n * @static\n * @const\n */\n","import d from 'debug';\nimport isPlainObject from 'lodash/isPlainObject';\nimport { applyMiddlewares } from './plugin';\n\nconst debug = d('LC:MessageParser');\n\nconst tryParseJson = (target, key, descriptor) => {\n  const fn = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function wrapper(param) {\n    let content;\n    if (typeof param !== 'string') {\n      content = param;\n    } else {\n      try {\n        content = JSON.parse(param);\n      } catch (error) {\n        content = param;\n      }\n    }\n    return fn.call(this, content);\n  };\n};\n\nconst applyPlugins = (target, key, descriptor) => {\n  const fn = descriptor.value;\n  // eslint-disable-next-line no-param-reassign\n  descriptor.value = function wrapper(json) {\n    return Promise.resolve(json)\n      .then(applyMiddlewares(this._plugins.beforeMessageParse))\n      .then(decoratedJson => fn.call(this, decoratedJson))\n      .then(applyMiddlewares(this._plugins.afterMessageParse));\n  };\n};\n\nexport default class MessageParser {\n  constructor(plugins = {}) {\n    this._plugins = plugins;\n    this._messageClasses = [];\n  }\n\n  register(messageClass) {\n    if (\n      messageClass &&\n      messageClass.parse &&\n      messageClass.prototype &&\n      messageClass.prototype.getPayload\n    ) {\n      this._messageClasses.unshift(messageClass);\n    } else {\n      throw new TypeError('Invalid messageClass');\n    }\n  }\n\n  // jsdoc-ignore-start\n  @tryParseJson\n  @applyPlugins\n  // jsdoc-ignore-end\n  parse(content) {\n    debug('parsing message: %O', content);\n    // eslint-disable-next-line no-restricted-syntax\n    for (const Klass of this._messageClasses) {\n      const contentCopy = isPlainObject(content)\n        ? Object.assign({}, content)\n        : content;\n      let valid;\n      let result;\n      try {\n        valid = Klass.validate(contentCopy);\n      } catch (error) {\n        // eslint-disable-line no-empty\n      }\n      if (valid) {\n        try {\n          result = Klass.parse(contentCopy);\n        } catch (error) {\n          console.warn('parsing a valid message content error', {\n            error,\n            Klass,\n            content: contentCopy,\n          });\n        }\n        if (result !== undefined) {\n          debug('parse result: %O', result);\n          return result;\n        }\n      }\n    }\n    throw new Error('No Message Class matched');\n  }\n}\n","/** @module leancloud-realtime */\nimport d from 'debug';\nimport uuid from 'uuid/v4';\nimport IMClient from './im-client';\nimport { RECONNECT, RECONNECT_ERROR } from './events/core';\nimport { Conversation } from './conversations';\nimport { MessageQueryDirection } from './conversations/conversation-base';\nimport Message, { MessageStatus } from './messages/message';\nimport BinaryMessage from './messages/binary-message';\nimport TextMessage from './messages/text-message';\nimport TypedMessage from './messages/typed-message';\nimport RecalledMessage from './messages/recalled-message';\nimport MessageParser from './message-parser';\nimport { trim, internal, ensureArray, finalize } from './utils';\n\nconst debug = d('LC:IMPlugin');\n\n/**\n * 消息优先级枚举\n * @enum {Number}\n * @since 3.3.0\n */\nconst MessagePriority = {\n  /** 高 */\n  HIGH: 1,\n  /** 普通 */\n  NORMAL: 2,\n  /** 低 */\n  LOW: 3,\n};\nObject.freeze(MessagePriority);\n\n/**\n * 为 Conversation 定义一个新属性\n * @param {String} prop 属性名\n * @param {Object} [descriptor] 属性的描述符，参见 {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor#Description getOwnPropertyDescriptor#Description - MDN}，默认为该属性名对应的 Conversation 自定义属性的 getter/setter\n * @returns void\n * @example\n *\n * conversation.get('type');\n * conversation.set('type', 1);\n *\n * // equals to\n * defineConversationProperty('type');\n * conversation.type;\n * conversation.type = 1;\n */\nconst defineConversationProperty = (\n  prop,\n  descriptor = {\n    get() {\n      return this.get(prop);\n    },\n    set(value) {\n      this.set(prop, value);\n    },\n  }\n) => {\n  Object.defineProperty(Conversation.prototype, prop, descriptor);\n};\n\nexport {\n  /**\n   * @see Message\n   */\n  Message,\n  /**\n   * @see BinaryMessage\n   */\n  BinaryMessage,\n  /**\n   * @see TypedMessage\n   */\n  TypedMessage,\n  /**\n   * @see TextMessage\n   */\n  TextMessage,\n  /**\n   * @see RecalledMessage\n   */\n  RecalledMessage,\n  MessagePriority,\n  MessageStatus,\n  MessageQueryDirection,\n  defineConversationProperty,\n};\n\nexport {\n  /**\n   * decorator，定义消息类的类型常量\n   * @function\n   * @param {Number} type 自定义类型请使用正整数\n   * @example @messageType(1)\n   * class CustomMessage extends TypedMessage {}\n   *\n   * // 不支持 decorator 的情况下可以这样使用\n   * class CustomMessage extends TypedMessage {\n   *   //...\n   * }\n   * messageType(1)(CustomMessage);\n   */\n  messageType,\n  /**\n   * decorator，定义消息类的自定义字段\n   * @function\n   * @param {String[]} fields 自定义字段\n   * @example @messageField(['foo'])\n   * class CustomMessage extends TypedMessage {\n   *   constructor(foo) {\n   *     super();\n   *     this.foo = foo;\n   *   }\n   * }\n   *\n   * // 不支持 decorator 的情况下可以这样使用\n   * class CustomMessage extends TypedMessage {\n   *   constructor(foo) {\n   *     super();\n   *     this.foo = foo;\n   *   }\n   *   //...\n   * }\n   * messageField(['foo'])(CustomMessage);\n   */\n  messageField,\n  IE10Compatible,\n} from './messages/helpers';\n\nexport { ConversationMemberRole } from './conversation-member-info';\nexport {\n  /**\n   * @see Conversation\n   */\n  Conversation,\n  /**\n   * @see ChatRoom\n   */\n  ChatRoom,\n  /**\n   * @see ServiceConversation\n   */\n  ServiceConversation,\n  /**\n   * @see TemporaryConversation\n   */\n  TemporaryConversation,\n} from './conversations';\n\nconst onRealtimeCreate = realtime => {\n  /* eslint-disable no-param-reassign */\n  const deviceId = uuid();\n  realtime._IMClients = {};\n  realtime._IMClientsCreationCount = 0;\n  const messageParser = new MessageParser(realtime._plugins);\n  realtime._messageParser = messageParser;\n\n  const signAVUser = async user =>\n    realtime._request({\n      method: 'POST',\n      path: '/rtm/sign',\n      data: {\n        session_token: user.getSessionToken(),\n      },\n    });\n\n  /**\n   * 注册消息类\n   *\n   * 在接收消息、查询消息时，会按照消息类注册顺序的逆序依次尝试解析消息内容\n   *\n   * @memberof Realtime\n   * @instance\n   * @param  {Function | Function[]} messageClass 消息类，需要实现 {@link AVMessage} 接口，\n   * 建议继承自 {@link TypedMessage}\n   * @throws {TypeError} 如果 messageClass 没有实现 {@link AVMessage} 接口则抛出异常\n   */\n  const register = messageClass =>\n    ensureArray(messageClass).map(messageParser.register.bind(messageParser));\n  register(ensureArray(realtime._plugins.messageClasses));\n  /**\n   * 创建一个即时通讯客户端，多次创建相同 id 的客户端会返回同一个实例\n   * @memberof Realtime\n   * @instance\n   * @param  {String|AV.User} [identity] 客户端 identity，如果不指定该参数，服务端会随机生成一个字符串作为 identity，\n   * 如果传入一个已登录的 AV.User，则会使用该用户的 id 作为客户端 identity 登录。\n   * @param  {Object} [options]\n   * @param  {Function} [options.signatureFactory] open session 时的签名方法 // TODO need details\n   * @param  {Function} [options.conversationSignatureFactory] 对话创建、增减成员操作时的签名方法\n   * @param  {Function} [options.blacklistSignatureFactory] 黑名单操作时的签名方法\n   * @param  {String} [options.tag] 客户端类型标记，以支持单点登录功能\n   * @param  {String} [options.isReconnect=false] 单点登录时标记该次登录是不是应用启动时自动重新登录\n   * @return {Promise.<IMClient>}\n   */\n  const createIMClient = async (\n    identity,\n    { tag, isReconnect, ...clientOptions } = {},\n    lagecyTag\n  ) => {\n    let id;\n    const buildinOptions = {};\n    if (identity) {\n      if (typeof identity === 'string') {\n        id = identity;\n      } else if (identity.id && identity.getSessionToken) {\n        ({ id } = identity);\n        const sessionToken = identity.getSessionToken();\n        if (!sessionToken) {\n          throw new Error('User must be authenticated');\n        }\n        buildinOptions.signatureFactory = signAVUser;\n      } else {\n        throw new TypeError('Identity must be a String or an AV.User');\n      }\n      if (realtime._IMClients[id] !== undefined) {\n        return realtime._IMClients[id];\n      }\n    }\n    if (lagecyTag) {\n      console.warn(\n        'DEPRECATION createIMClient tag param: Use options.tag instead.'\n      );\n    }\n    const _tag = tag || lagecyTag;\n    const promise = realtime\n      ._open()\n      .then(connection => {\n        const client = new IMClient(\n          id,\n          { ...buildinOptions, ...clientOptions },\n          {\n            _connection: connection,\n            _request: realtime._request.bind(realtime),\n            _messageParser: messageParser,\n            _plugins: realtime._plugins,\n            _identity: identity,\n          }\n        );\n        connection.on(RECONNECT, () =>\n          client\n            ._open(realtime._options.appId, _tag, deviceId, true)\n            /**\n             * 客户端连接恢复正常，该事件通常在 {@link Realtime#event:RECONNECT} 之后发生\n             * @event IMClient#RECONNECT\n             * @see Realtime#event:RECONNECT\n             * @since 3.2.0\n             */\n            /**\n             * 客户端重新登录发生错误（网络连接已恢复，但重新登录错误）\n             * @event IMClient#RECONNECT_ERROR\n             * @since 3.2.0\n             */\n            .then(\n              () => client.emit(RECONNECT),\n              error => client.emit(RECONNECT_ERROR, error)\n            )\n        );\n        internal(client)._eventemitter.on(\n          'beforeclose',\n          () => {\n            delete realtime._IMClients[client.id];\n            if (realtime._firstIMClient === client) {\n              delete realtime._firstIMClient;\n            }\n          },\n          realtime\n        );\n        internal(client)._eventemitter.on(\n          'close',\n          () => {\n            realtime._deregister(client);\n          },\n          realtime\n        );\n        return client\n          ._open(realtime._options.appId, _tag, deviceId, isReconnect)\n          .then(() => {\n            realtime._IMClients[client.id] = client;\n            realtime._IMClientsCreationCount += 1;\n            if (realtime._IMClientsCreationCount === 1) {\n              client._omitPeerId(true);\n              realtime._firstIMClient = client;\n            } else if (\n              realtime._IMClientsCreationCount > 1 &&\n              realtime._firstIMClient\n            ) {\n              realtime._firstIMClient._omitPeerId(false);\n            }\n            realtime._register(client);\n            return client;\n          })\n          .catch(error => {\n            delete realtime._IMClients[client.id];\n            throw error;\n          });\n      })\n      .then(\n        ...finalize(() => {\n          realtime._deregisterPending(promise);\n        })\n      );\n    if (identity) {\n      realtime._IMClients[id] = promise;\n    }\n    realtime._registerPending(promise);\n    return promise;\n  };\n  Object.assign(realtime, {\n    register,\n    createIMClient,\n  });\n  /* eslint-enable no-param-reassign */\n};\n\nconst beforeCommandDispatch = (command, realtime) => {\n  const isIMCommand = command.service === null || command.service === 2;\n  if (!isIMCommand) return true;\n  const targetClient = command.peerId\n    ? realtime._IMClients[command.peerId]\n    : realtime._firstIMClient;\n  if (targetClient) {\n    Promise.resolve(targetClient)\n      .then(client => client._dispatchCommand(command))\n      .catch(debug);\n  } else {\n    debug(\n      '[WARN] Unexpected message received without any live client match: %O',\n      trim(command)\n    );\n  }\n  return false;\n};\n\nexport const IMPlugin = {\n  name: 'leancloud-realtime-plugin-im',\n  onRealtimeCreate,\n  beforeCommandDispatch,\n  messageClasses: [Message, BinaryMessage, RecalledMessage, TextMessage],\n};\n","import { Realtime } from './core';\nimport { IMPlugin, defineConversationProperty } from './plugin-im';\nimport * as CoreEvent from './events/core';\nimport * as IMEvent from './events/im';\n\nRealtime.defineConversationProperty = defineConversationProperty;\nRealtime.__preRegisteredPlugins = [IMPlugin];\n\nconst Event = {\n  ...CoreEvent,\n  ...IMEvent,\n};\n\nexport {\n  /**\n   * SDK 可能会派发的事件枚举\n   * @name Event\n   * @memberof module:leancloud-realtime\n   * @enum {String}\n   * @since 4.0.0\n   */\n  Event,\n};\n\nexport {\n  /**\n   * 错误码，详见 {@link https://leancloud.cn/docs/realtime_v2.html#云端错误码说明}\n   * @name ErrorCode\n   * @memberof module:leancloud-realtime\n   * @enum {Number}\n   * @since 3.3.0\n   */\n  ErrorCode,\n} from './error';\n\nexport * from './core';\n\nexport * from './plugin-im';\n"],"names":["module","require","newBuilder","build","messages","push_server","messages2","JsonObjectMessage","UnreadTuple","LogItem","DataCommand","SessionCommand","ErrorCommand","DirectCommand","AckCommand","UnreadCommand","ConvCommand","RoomCommand","LogsCommand","RcpCommand","ReadTuple","MaxReadTuple","ReadCommand","PresenceCommand","ReportCommand","GenericCommand","BlacklistCommand","PatchCommand","PatchItem","ConvMemberInfo","CommandType","OpType","StatusType","global","window","EXPIRED","debug","d","Expirable","value","ttl","originalValue","expiredAt","Date","now","expired","Cache","name","_map","get","key","cache","set","tryAll","promise","promiseConstructors","length","catch","slice","tap","interceptor","finalize","callback","error","decodeDate","date","__type","iso","toNumber","getTime","undefined","decode","Array","isArray","map","isPlainObject","reduce","result","encode","toJSON","keyRemap","keymap","obj","newObj","newKey","isIE10","navigator","userAgent","indexOf","getStaticProperty","klass","property","__proto__","union","a","b","difference","filter","bSet","has","x","internal","object","compact","prop","hasOwnProperty","call","removeNull","trim","JSON","parse","message","ensureArray","target","setValue","segs","split","lastSeg","pop","currentTarget","forEach","seg","isWeapp","wx","connectSocket","throttle","descriptor","Error","throttleMeta","propertyMeta","previouseTimestamp","timeout","remainingTime","wait","apply","setTimeout","OPEN","DISCONNECT","RECONNECT","RETRY","SCHEDULE","OFFLINE","ONLINE","ERROR","MESSAGE","HEARTBEAT_TIME","TIMEOUT_TIME","DEFAULT_RETRY_STRATEGY","Math","min","attempt","requireConnected","requireConnectedWrapper","checkConnectionAvailability","args","WebSocketPlus","_urls","urls","getUrls","protocol","WebSocket","init","_protocol","resolve","then","_open","__postponeTimeoutTimer","_postponeTimeoutTimer","bind","addEventListener","__pause","can","pause","__resume","resume","open","throw","_createWs","first","reset","ws","reject","url","binaryType","onopen","onclose","onerror","_ws","_handleClose","onmessage","_handleMessage","_destroyWs","close","onbeforeevent","event","from","to","payload","emit","onconnected","_startConnectionKeeper","onleaveconnected","_stopConnectionKeeper","onpause","onbeforeresume","onreconnect","ondisconnected","delay","__scheduledRetry","is","retry","onretry","reconnect","fail","removeEventListener","currentState","current","warn","_ping","ping","_clearTimeoutTimers","_timeoutTimer","disconnect","_heartbeatTimer","setInterval","addListener","removeListener","code","reason","isFinished","handleClose","send","data","handleMessage","EventEmitter","StateMachine","create","prototype","ErrorCode","Number","createError","appCode","detail","errorMessage","err","COMMAND_TIMEOUT","EXPIRE","Connection","getUrl","format","version","protocolString","encodeURIComponent","_protocalFormat","_commands","_serialId","command","waitingForRespond","i","serialId","enabled","toBase64","toArrayBuffer","TypeError","cmd","op","msg","e","goaway","echo","checkType","constructor","param","middleware","console","_pluginName","applyDecorators","decorators","decorator","applyMiddlewares","middlewares","previousPromise","applyDispatcher","dispatchers","resultPromise","dispatcher","shouldDispatch","debugRequest","routerCache","Realtime","plugins","options","VERSION","appId","appKey","_options","process","env","RTM_SERVER_NAME","_cache","_this","clients","pendingClients","mergedPlugins","__preRegisteredPlugins","plugin","_plugins","hook","concat","onRealtimeCreate","_request","method","path","query","headers","server","_getServerUrls","api","axios","response","status","_openPromise","noBinary","pushOfflineMessages","connection","_getRTMServers","on","_dispatchCommand","isFatal","APP_NOT_AVAILABLE","INVALID_LOGIN","INVALID_ORIGIN","some","errorCode","RTMServers","shuffle","cachedEndPoints","_fetchRTMServers","info","secondary","cachedRouter","res","RTMRouter","rtm_router_server","api_server","serverUrls","id","toLowerCase","domain","ssl","RTMServerName","_close","cannot","_registerPending","add","_deregisterPending","client","delete","_register","_deregister","size","beforeCommandDispatch","UNREAD_MESSAGES_COUNT_UPDATE","CLOSE","CONFLICT","CONVERSATION_INFO_UPDATED","UNHANDLED_MESSAGE","INVITED","KICKED","MEMBERS_JOINED","MEMBERS_LEFT","MEMBER_INFO_UPDATED","BLOCKED","UNBLOCKED","MEMBERS_BLOCKED","MEMBERS_UNBLOCKED","MUTED","UNMUTED","MEMBERS_MUTED","MEMBERS_UNMUTED","MESSAGE_RECALL","MESSAGE_UPDATE","LAST_DELIVERED_AT_UPDATE","LAST_READ_AT_UPDATE","INFO_UPDATED","MessageStatus","rMessageStatus","NONE","SENDING","SENT","DELIVERED","READ","FAILED","Message","content","uuid","_setStatus","getPayload","_toJSON","cid","timestamp","deliveredAt","updatedAt","mentionList","mentionedAll","mentioned","toFullJSON","_updatedAt","_status","_updateMentioned","_mentioned","getMentionList","setMentionList","mentionAll","Boolean","validate","json","_timestamp","_deliveredAt","messageType","type","TYPE","_lctype","_getType","messageField","fields","originalCustomFields","_customFields","IE10Compatible","TypedMessage","setText","text","_lctext","getText","setAttributes","attributes","_lcattrs","getAttributes","_getCustomFields","field","summary","customFields","RecalledMessage","serializeMessage","binaryMsg","ArrayBuffer","QueryDirection","NEW","OLD","MessageQueryDirection","ConversationBase","lastMessageAt","lastMessage","lastDeliveredAt","lastReadAt","unreadMessagesCount","members","properties","_client","Event","_debug","onConversationCreate","_setUnreadMessagesMentioned","unreadMessagesMentioned","_setLastDeliveredAt","_setLastReadAt","params","_send","convMessage","sendOptions","getSendOptions","transient","receipt","priority","pushData","will","resCommand","ackMessage","uid","t","messagesWaitingForReceipt","_update","newMessage","recall","patch","modify","_lastPatchTime","count","_addMembers","_removeMembers","update","queryMessages","beforeTime","beforeMessageId","afterTime","afterMessageId","limit","direction","startTime","startMessageId","startClosed","endTime","endMessageId","endClosed","conditions","tt","OLD_TO_NEW","all","logsMessage","logs","msgId","patchTimestamp","ackAt","readAt","mentionPids","bin","parseMessage","messageData","createMessagesIterator","prevMessages","read","readConversationsBuffer","_doSendRead","_handleReceipt","messageId","fetchReceiptTimestamps","maxReadTimestamp","maxAckTimestamp","_fetchAllReceiptTimestamps","maxReadTuples","maxReadTuple","pid","time","_lastMessageAt","_validateSignature","signatureResult","signature","nonce","signatureFactory","createPartiallySuccess","allowedPids","failedPids","pids","clientIds","PersistentConversation","creator","createdAt","system","muted","mutedMembers","_reset","currentAttributes","pendingAttributes","pendingKeys","re","RegExp","childKeys","test","k","parentKey","_buildCurrentAttributes","cloneDeep","_attributes","_updateServerAttributes","save","isEmpty","attr","udate","fetch","getQuery","equalTo","find","mute","unmute","_appendConversationSignature","action","conversationSignatureFactory","sort","runSignatureFactory","_appendBlacklistSignature","blacklistSignatureFactory","blacklistMessage","remove","join","failures","quit","muteMembers","add_shutup","unmuteMembers","remove_shutup","queryMutedMembers","next","query_shutup","m","newNext","blockMembers","block","unblockMembers","unblock","queryBlockedMembers","blockedPids","_createdAt","ConversationMemberRole","ConversationMemberInfo","conversation","memberId","role","conversationId","isOwner","OWNER","Conversation","memberInfoMap","MEMBER","_fetchAllMemberInfo","_requestWithSessionToken","results","clientId","memberInfo","getAllMemberInfo","noCache","getMemberInfo","updateMemberRole","OWNER_PROMOTION_NOT_ALLOWED","member_info_update","memberInfos","ChatRoom","ServiceConversation","subscribe","unsubscribe","transformNotFoundError","CONVERSATION_NOT_FOUND","TEMPORARY_CONVERSATION_EXPIRED","TemporaryConversation","_expiredAt","ConversationQuery","_encode","source","_quote","s","replace","_calculateFlag","prev","_where","_extraOptions","_addCondition","condition","_skip","skip","_limit","_order","containsMembers","peerIds","containsAll","withMembers","includeSelf","peerIdsSet","sizeEqualTo","lessThan","lessThanOrEqualTo","greaterThan","greaterThanOrEqualTo","notEqualTo","exists","doesNotExist","containedIn","values","notContainsIn","contains","subString","startsWith","prefix","endsWith","suffix","matches","regex","_modifiers","ignoreCase","multiline","ascending","addAscending","descending","addDescending","withLastMessagesRefreshed","_executeQuery","SessionManager","refresh","onBeforeGetSessionToken","_onBeforeGetSessionToken","setSessionToken","token","sessionToken","_sessionToken","_pendingSessionTokenPromise","setSessionTokenAsync","currentSessionToken","getSessionToken","autoRefresh","newValue","revoke","isTemporaryConversatrionId","configBitmap","IMClient","props","_messageParser","_conversationCache","_ackMessageBuffer","lastPatchTime","lastNotificationTime","_eventemitter","onIMClientCreate","serverTs","conv","direct","session","unread","rcp","_dispatchConvMessage","_dispatchDirectMessage","_dispatchSessionMessage","_dispatchUnreadMessage","_dispatchRcpMessage","_dispatchPatchMessage","sessionMessage","closed","SESSION_CONFLICT","unreadMessage","convs","notifTime","lastUnreadNotifTime","getConversations","mid","ts","messageProps","countNotUpdated","conversations","rcpMessage","patches","patchMessage","patchCode","patchReason","patchTime","initBy","getConversation","joined","left","members_joined","members_left","members_blocked","members_unblocked","blocked","unblocked","members_shutuped","members_unshutuped","shutuped","unshutuped","member_info_changed","updated","originalMessage","directMessage","fromPeerId","_sendAck","_dispatchParsedMessage","beforeMessageDispatch","push","_doSendAck","_connection","convAckMessages","timestamps","max","_omitPeerId","peerIdOmittable","peerId","tag","deviceId","isReconnect","_identity","_sessionManager","SESSION_TOKEN_EXPIRED","st","tokenTTL","stTtl","_createSessionManager","_syncNotifications","_fetchNotifications","hasMore","notifications","notification","manager","expiredSessionToken","onlineSessionPeerIds","cachedConversation","_getTemporaryConversations","ids","remoteConversationIds","remoteTemporaryConversationIds","remoteTemporaryConversationsPromise","_handleQueryResults","getChatRoomQuery","getServiceConversationQuery","where","queryJSON","commandString","_parseConversationFromRawData","_upsertConversationToCache","fetchedConversation","decodeBase64","parseConversation","conversationData","rawData","msg_from","msg_mid","msg_timestamp","patch_timestamp","lastMessageFrom","lastMessageId","lastMessageTimestamp","lastMessagePatchTimestamp","createConversation","unique","tempConv","_tempConv","tempConvTTL","_tempConvTTL","startCommandJson","cdate","createChatRoom","createTemporaryConversation","buffer","clear","_sendReadCommand","RECONNECT_ERROR","BinaryMessage","encodeBase64","TextMessage","tryParseJson","fn","wrapper","applyPlugins","beforeMessageParse","decoratedJson","afterMessageParse","MessageParser","_messageClasses","register","messageClass","unshift","Klass","contentCopy","valid","MessagePriority","defineConversationProperty","_IMClients","_IMClientsCreationCount","messageParser","realtime","signAVUser","user","messageClasses","createIMClient","identity","clientOptions","lagecyTag","buildinOptions","_tag","_firstIMClient","isIMCommand","service","targetClient","IMPlugin","CoreEvent","IMEvent"],"mappings":"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"}